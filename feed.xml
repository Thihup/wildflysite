<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="https://jbossorg.github.io/wildflysite/feed.xml" rel="self" type="application/atom+xml" /><link href="https://jbossorg.github.io/wildflysite/" rel="alternate" type="text/html" /><updated>2020-05-29T05:14:59+00:00</updated><id>https://jbossorg.github.io/wildflysite/</id><title type="html">Wildfly</title><entry><title type="html">Pluging Apache Qpid into WildFly</title><link href="https://jbossorg.github.io/wildflysite/news/2020/05/11/Using-Qpid-with-WildFly/" rel="alternate" type="text/html" title="Pluging Apache Qpid into WildFly" /><published>2020-05-11T14:00:00+00:00</published><updated>2020-05-11T14:00:00+00:00</updated><id>https://jbossorg.github.io/wildflysite/news/2020/05/11/Using-Qpid-with-WildFly</id><content type="html" xml:base="https://jbossorg.github.io/wildflysite/news/2020/05/11/Using-Qpid-with-WildFly/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using JBoss Generic JMS Resource Adapter you can use a JMS compatible client to connect WildFly to any broker. This article will describe how to do this with Apache Qpid and thus use JMS over AMQP.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;installing-apache-qpid&quot;&gt;Installing Apache Qpid&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You need to download and untar Apache Qpid Broker-J 8.0.0 from &lt;a href=&quot;https://qpid.apache.org/download.html&quot;&gt;https://qpid.apache.org/download.html&lt;/a&gt;.
You need to allow for anonymous access. Please use the &lt;a href=&quot;https://raw.githubusercontent.com/ehsavoie/qpid-example/master/initial-config.json&quot;&gt;initial-config.json&lt;/a&gt; configuration file.
Note that we will start Apache Qpid HTTP server on 9080 to avoid port conflict with WildFly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cd $INSTALL_DIR
tar xvzf qpid-broker-8.0.0-bin.tgz
export QPID_WORK=$INSTALL_DIR/qpid-broker/8.0.0/work
cd pid-broker/8.0.0/bin
./qpid-server -icp initial-config.json -prop &quot;qpid.http_port=9080&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now you can connect to &lt;a href=&quot;http://localhost:9080&quot;&gt;the Qpid web interface&lt;/a&gt; using &lt;em&gt;guest/guest&lt;/em&gt;. You can see that we have created 2 queues: &lt;strong&gt;outQueue&lt;/strong&gt; and &lt;strong&gt;testQueue&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;configuring-wildfly&quot;&gt;Configuring WildFly&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are going to use the JBoss Generic JMS Resource Adapter. For this we need to deploy a module for the JMS provider to connect to Apache Qpid. Download the archive &lt;a href=&quot;https://github.com/ehsavoie/qpid-example/raw/master/qpid-provider.tar.gz&quot;&gt;qpid-provider.tar.gz&lt;/a&gt; which provides the module to connect to Apache Qpid.
Then we start WildFly with the &lt;em&gt;full&lt;/em&gt; profile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cd $WILDFLY_HOME
tar xvzf qpid-provider.tar.gz
cd $WILDFLY_HOME/bin
./standalone.sh -c standalone-full.xml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To configure WildFly you need to execute the following operations using the &lt;em&gt;jboss-cli&lt;/em&gt;. You can use the following script &lt;a href=&quot;https://raw.githubusercontent.com/ehsavoie/qpid-example/master/qpid.cli&quot;&gt;qpid.cli&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First we will enable the use of property replacement in our deployment for easier configurability:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;/subsystem=ee:write-attribute(name=spec-descriptor-property-replacement, value=true)
/subsystem=ee:write-attribute(name=annotation-property-replacement, value=true)
/subsystem=ee:write-attribute(name=jboss-descriptor-property-replacement, value=true)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then we need to configure the JNDI provider for Apache Qpid:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;/subsystem=naming/binding=java\:global\/qpid:add(binding-type=external-context, class=javax.naming.InitialContext, module=org.jboss.genericjms.provider, environment={java.naming.factory.initial=org.apache.qpid.jms.jndi.JmsInitialContextFactory, queue.testQueue=testQueue, queue.outQueue=outQueue, connectionfactory.QpidBroker=&quot;amqp://localhost:5672?jms.username=guest&amp;amp;amp;jms.password=guest&quot;})
/subsystem=naming/binding=java\:\/jms\/qpid\/queue\/testQueue:add(binding-type=lookup, value=java\:global\/qpid\/testQueue)
/subsystem=naming/binding=java\:\/jms\/qpid\/queue\/outQueue:add(binding-type=lookup, lookup=java\:global\/qpid\/outQueue)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last we need to configure the resource adapter to connect to our Apache Qpid broker:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;/subsystem=resource-adapters/resource-adapter=apache-qpid:add(module=org.jboss.genericjms, transaction-support=NoTransaction)
/subsystem=resource-adapters/resource-adapter=apache-qpid/connection-definitions=QPIDCF:add(jndi-name=java\:\/jms\/qpid\/cf\/QpidBroker, class-name=org.jboss.resource.adapter.jms.JmsManagedConnectionFactory)
/subsystem=resource-adapters/resource-adapter=apache-qpid/connection-definitions=QPIDCF/config-properties=JndiParameters:add(value=&quot;java.naming.factory.initial=org.apache.qpid.jms.jndi.JmsInitialContextFactory;connectionfactory.QpidBroker=amqp://localhost:5672?jms.username=guest&amp;amp;jms.password=guest&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;running-the-example&quot;&gt;Running the example&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can download the example code from &lt;a href=&quot;https://github.com/ehsavoie/qpid-example&quot;&gt;this GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The example consists of two parts :  a &lt;em&gt;client&lt;/em&gt; that will send a message to the &lt;strong&gt;testQueue&lt;/strong&gt; to be processed by the &lt;em&gt;Message Driven Bean&lt;/em&gt; which will send a message on the &lt;strong&gt;outQueue&lt;/strong&gt; to be consumed by the &lt;em&gt;client&lt;/em&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is the client code that sends a message:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;try (Connection connection = factory.createConnection(&quot;guest&quot;, &quot;guest&quot;)) {
    connection.start();
    Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);
    MessageProducer messageProducer = session.createProducer(queue);

    TextMessage message = session.createTextMessage(&quot;Hello world!&quot;);
    messageProducer.send(message, DeliveryMode.NON_PERSISTENT, Message.DEFAULT_PRIORITY, Message.DEFAULT_TIME_TO_LIVE);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The MDB code is in &lt;a href=&quot;https://github.com/ehsavoie/qpid-example/blob/master/ejb/src/main/java/org/wildfly/jms/demo/qpid/mdb/remote/RemoteQueueMDB.java&quot;&gt;RemoteQueueMDB.java&lt;/a&gt; and will send back a message to be consumed by the client.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;@Override
public void onMessage(Message message) {
    try (QueueConnection queueConnection = qcf.createQueueConnection(&quot;guest&quot;, &quot;guest&quot;);
    QueueSession queueSession = queueConnection.createQueueSession(true, Session.SESSION_TRANSACTED);
    QueueSender queueSender = queueSession.createSender(outQueue)) {
    if (message instanceof TextMessage) {
        txtMsg = (TextMessage) message;
        msgCnt++;
        queueSender.send(message);
        queueSession.commit();
    } else {
        LOG.warnf(&quot;MDB[%d] Message of wrong type: %s&quot;, mdbID, message.getClass().getName());
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Build using Apache Maven, then deploy the MDB by copying &lt;em&gt;remote-mdb-ejb-1.0.0.jar&lt;/em&gt; into the &lt;em&gt;deployments&lt;/em&gt; folder and run the client:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cd client
mvn &quot;-Dexec.args=-classpath %classpath org.wildfly.jms.demo.qpid.client.HelloWorld&quot; -Dexec.executable=/usr/lib/jvm/java-11/bin/java -Dexec.classpathScope=runtime org.codehaus.mojo:exec-maven-plugin:1.5.0:exec&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You should see the following message in the traces showing that all went nicely and that the client has received the message :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Message received 419a7c4d-afe0-4dc2-9cf0-f17f531eb1ba:1:1:1-1 with text Hello world!&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Emmanuel Hugonnet</name></author><category term="wildfly," /><category term="JMS," /><category term="configuration," /><category term="qpid," /><category term="AMQP" /></entry><entry><title type="html">WildFly 19.1.0 is released!</title><link href="https://jbossorg.github.io/wildflysite/news/2020/05/04/WildFly-1910-Released/" rel="alternate" type="text/html" title="WildFly 19.1.0 is released!" /><published>2020-05-04T14:00:00+00:00</published><updated>2020-05-04T14:00:00+00:00</updated><id>https://jbossorg.github.io/wildflysite/news/2020/05/04/WildFly-1910-Released</id><content type="html" xml:base="https://jbossorg.github.io/wildflysite/news/2020/05/04/WildFly-1910-Released/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;WildFly 19.1.0 Final is now available &lt;a href=&quot;{base_url}/downloads&quot;&gt;for download&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we usually do between WildFly majors, we&amp;#8217;ve done an update release to provide the WildFly community with important bug fixes and component upgrades that have become available. Typically these are micro releases, but this time we had one feature that we wanted to make available, so we changed the version to 19.1.0 and released a minor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The feature is related to handling of &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-5.3.7&quot;&gt;&lt;code&gt;SameSite&lt;/code&gt; cookie attributes&lt;/a&gt;.  Undertow has &lt;a href=&quot;https://issues.redhat.com/browse/UNDERTOW-1600&quot;&gt;added support&lt;/a&gt; for &lt;code&gt;SameSite=&quot;None&quot;&lt;/code&gt; cookie attributes and support for a new &lt;code&gt;SameSiteCookieHandler&lt;/code&gt; that sets &lt;code&gt;SameSite&lt;/code&gt; attributes on cookies that match a cookie name pattern. With this handler, web developers can remain compliant with the latest changes in some browsers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To use the &lt;code&gt;SameSiteCookieHandler&lt;/code&gt;, add a &lt;code&gt;undertow-handlers.conf&lt;/code&gt; file to your WAR&amp;#8217;s WEB-INF directory that includes a line like the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;samesite-cookie(mode=&amp;lt;mode&amp;gt;)&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Valid values for the &lt;code&gt;mode&lt;/code&gt; parameter are &lt;code&gt;Strict&lt;/code&gt;, &lt;code&gt;Lax&lt;/code&gt; or &lt;code&gt;None&lt;/code&gt;, ignoring case. See &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-5.3.7&quot;&gt;RFC6265bis&lt;/a&gt; for more information on the meaning of these modes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Further details, including other parameters you can use to configure the &lt;code&gt;SameSiteCookieHandler&lt;/code&gt;, are discussed in the &lt;a href=&quot;https://github.com/wildfly/wildfly-proposals/blob/master/undertow/WFLY-13003_Support_SameSite_Cookie_Attribute.adoc#wfly-13003-support-samesite-cookie-attribute&quot;&gt;WFLY-13003 feature analysis&lt;/a&gt; document.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to add the SameSite handler to your application without changing the application code, look into using a &lt;a href=&quot;https://docs.wildfly.org/19.1/Admin_Guide.html#Deployment_Overlays&quot;&gt;deployment overlay&lt;/a&gt; to add the `WEB-INF/undertow-handlers.conf' file to existing deployments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The full list of issues resolved in WildFly 19.1.0 is available &lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12313721&amp;amp;version=12345176&quot;&gt;here&lt;/a&gt;. Issues resolved in the WildFly Core 11.1.0 release included with WildFly 19.1.0 are available &lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12315422&amp;amp;version=12345151&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;note-for-galleon-users&quot;&gt;Note for Galleon Users&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you provisioned a WildFly server associated with the &lt;code&gt;19.0&lt;/code&gt; channel, a simple Galleon update won&amp;#8217;t update your installation to 19.1.0, as 19.1.0 is not part of that channel&amp;#8217;s version range.  There&amp;#8217;s a new &lt;code&gt;19.1&lt;/code&gt; channel that you&amp;#8217;ll need to specify.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, if you&amp;#8217;d originally provisioned your server like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ galleon.sh install wildfly:19.0 --dir=my-wildfly --layers=jaxrs-server
Feature-packs resolved.
Feature-packs resolved.
Packages installed.
JBoss modules installed.
Configurations generated.
Feature pack installed.
======= ============ ==============
Product Build        Update Channel
======= ============ ==============
wildfly 19.0.0.Final 19.0&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then a simple update will do nothing:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ galleon.sh update --dir=my-wildfly
Feature-packs resolved.
Up to date. No available updates nor patches.&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To get the update change the channel to 19.1:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$ galleon.sh update --feature-packs=wildfly:19.1#19.1.0.Final --dir=my-wildfly
Feature-packs resolved.
Some updates and/or patches are available.
======= ============= ============ ==============
Product Current Build Update       Update Channel
======= ============= ============ ==============
wildfly 19.0.0.Final  19.1.0.Final 19.1

Proceed with latest updates [y/n]?
Feature-packs resolved.
Packages installed.
JBoss modules installed.
Configurations generated.

$ galleon.sh get-info --dir=my-wildfly

======= ============ ==============
Product Build        Update Channel
======= ============ ==============
wildfly 19.1.0.Final 19.1&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope you enjoy WildFly 19.1. If you have any questions or feedback please find us at the &lt;a href=&quot;https://groups.google.com/forum/#!forum/wildfly&quot;&gt;WildFly forums&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Brian Stansberry</name></author><category term="announcement," /><category term="release" /></entry><entry><title type="html">Configuring WildFly S2I image by using CLI Management Operations</title><link href="https://jbossorg.github.io/wildflysite/news/2020/04/13/How-to-configure-wildfly-s2i-by-cli-operations/" rel="alternate" type="text/html" title="Configuring WildFly S2I image by using CLI Management Operations" /><published>2020-04-13T00:00:00+00:00</published><updated>2020-04-13T00:00:00+00:00</updated><id>https://jbossorg.github.io/wildflysite/news/2020/04/13/How-to-configure-wildfly-s2i-by-cli-operations</id><content type="html" xml:base="https://jbossorg.github.io/wildflysite/news/2020/04/13/How-to-configure-wildfly-s2i-by-cli-operations/">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The standard and recommended way to configure the WildFly cloud images is by using environment variables. However, you could find it useful for your use case to configure the server by using a custom CLI &lt;a href=&quot;https://docs.wildfly.org/19/Admin_Guide.html#operations&quot;&gt;management operations&lt;/a&gt; script.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following post describes how you can apply management operations to configure the WildFly server image. We will show you how you can execute CLI scripts at the &lt;a href=&quot;https://github.com/openshift/source-to-image&quot;&gt;Source-to-Image (S2I)&lt;/a&gt; phase and how to use the extensions mechanism provided by the WildFly cloud image to execute CLI management operations at runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This practical guide uses &lt;a href=&quot;https://github.com/code-ready/crc&quot;&gt;Red Hat CodeReady Containers&lt;/a&gt; as a local OpenShift cluster. It assumes you have basic knowledge of OpenShift and you know how to configure the WildFly S2I image by using environment variables.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;executing-a-cli-management-operations-script-at-the-source-to-image-s2i-phase&quot;&gt;Executing a CLI management operations script at the Source-to-Image (S2I) phase&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Source-to-Image is the tool used internally by OpenShift to build container images from application source code. When we are creating an OpenShift new application using the WildFly image stream, S2I takes our application source code from a Git repository, provisions the WildFly server by using Galleon layers and builds the final image that runs the assembled application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this example we are going to assemble this &lt;a href=&quot;https://github.com/yersan/jaxrs-postgresql-demo&quot;&gt;JAX-RS PostgreSQL&lt;/a&gt; demo application with the WildFly server provisioned by Galleon with the PostgreSQL drivers. Our demo application expects a data source available under the following &lt;code&gt;java:jboss/datasources/PostgreSQLDS&lt;/code&gt; JNDI resource. This data source will be configured executing the following &lt;a href=&quot;https://github.com/yersan/jaxrs-postgresql-demo/blob/cli-at-s2i/s2i-config/config-ds.cli&quot;&gt;config-ds.cli&lt;/a&gt; CLI script:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;data-source add --jndi-name=java:/jboss/datasources/PostgreSQLDS \
    --name=PostgreSQLPool \
    --connection-url=jdbc:postgresql://database-server:5432/demodb \
    --driver-name=postgresql \
    --user-name=postgre \
    --password=admin&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can take a look at &lt;a href=&quot;https://wildfly.org/news/2019/11/11/WildFly-s2i-openshift-Datasource-configuration/&quot;&gt;Configuring WildFly S2I image Datasources on OpenShift&lt;/a&gt; post where it was explained how to configure a Datasource in WildFly S2I image using Galleon layers and environment variables.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;s2i-build-time-wildfly-server-customization-hooks-to-execute-a-cli-script&quot;&gt;S2i build time WildFly server customization hooks to execute a CLI script&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The WildFly server customization hooks offer a way to execute a CLI script when your application is being assembled at S2I phase. To do so you have to configure the &lt;code&gt;S2I_IMAGE_SOURCE_MOUNTS&lt;/code&gt; variable pointing out to the directory that will contain your configuration scripts. This directory is checked during S2I phase, and if an &lt;strong&gt;install.sh&lt;/strong&gt; file is located in the root of the mount point, then this file is executed. This hook gives you the opportunity to execute any task you need to tweak the final image created by the S2I tool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In our example, the &lt;a href=&quot;https://github.com/yersan/jaxrs-postgresql-demo/blob/cli-at-s2i/s2i-config/install.sh&quot;&gt;install.sh&lt;/a&gt; file is located under &lt;code&gt;s2i-config&lt;/code&gt; directory on our Git repository and we have &lt;a href=&quot;https://github.com/yersan/jaxrs-postgresql-demo/blob/cli-at-s2i/.s2i/environment&quot;&gt;S2I_IMAGE_SOURCE_MOUNTS&lt;/a&gt; variable configured with this directory location relative to our Git repository root.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice you can set any S2I environment variables in the application source code. These variables are passed to the build, and the assemble script consumes them. All environment variables are also present in the output application image. These variables are defined in the &lt;code&gt;.s2i/environment&lt;/code&gt; file inside the application sources. The format of this file is a simple key-value.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The content of our &lt;strong&gt;install.sh&lt;/strong&gt; script is the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;#!/usr/bin/env bash
source /usr/local/s2i/install-common.sh

injected_dir=$1
echo &quot;Running on injected_dir=${injected_dir}&quot;

run_cli_script &quot;${injected_dir}/config-ds.cli&quot;

echo &quot;End CLI configuration&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The script is a regular bash file. It starts with sourcing &lt;code&gt;/usr/local/s2i/install-common.sh&lt;/code&gt; file. This file is included in the WildFly S2I image and contains the following functions that can be used by the &lt;strong&gt;install.sh&lt;/strong&gt; script to install and configure JBoss Modules modules, drivers, generic deployments and execute CLI scripts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;install_deployments&lt;/code&gt;: Copy the file passed as an argument to the server deployment directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;install_modules&lt;/code&gt;: Copy all the JBoss Modules modules in the directory passed as argument to the server modules directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;configure_drivers&lt;/code&gt;: Configure the desired drivers using the environment file passed as an argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;run_cli_script&lt;/code&gt;: Execute the CLI script passed as an argument.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This &lt;strong&gt;install.sh&lt;/strong&gt; script is invoked by the WildFly S2I image by passing it as an argument the location of the &lt;code&gt;S2I_IMAGE_SOURCE_MOUNTS&lt;/code&gt; directory inside of the final image filesystem. You can use this argument to point out to other files or directories included in your application sources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Behind the scenes &lt;code&gt;run_cli_script&lt;/code&gt; will start the WildFly embedded server which will execute the CLI script file you supply as an argument to this function. In our example, we have passed the CLI script which is available at &lt;code&gt;&quot;${injected_dir}/config-ds.cli&quot;&lt;/code&gt; inside of the assembled image.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you need it, you can also create your CLI script on the fly when the &lt;strong&gt;install.sh&lt;/strong&gt; is being executed so you can grab values for any &lt;a href=&quot;https://docs.openshift.com/container-platform/4.2/builds/creating-build-inputs.html#builds-build-environment_creating-build-inputs&quot;&gt;build environment variables&lt;/a&gt; and use those values to tweak your script.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example suppose we need to pass the data source username and password via environment variables. You can get them in the &lt;strong&gt;install.sh&lt;/strong&gt; script and use their values when you are creating the CLI script file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;#!/usr/bin/env bash
source /usr/local/s2i/install-common.sh

injected_dir=$1
echo &quot;Running on injected_dir=${injected_dir}&quot;

# This creates the CLI file on the fly so you can grab env build config variables and use them in your script
echo &quot;data-source add --jndi-name=java:/jboss/datasources/PostgreSQLDS \
    --name=PostgreSQLPool \
    --connection-url=jdbc:postgresql://database-server:5432/demodb \
    --driver-name=postgresql \
    --user-name=${DS_USERNAME} \
    --password=${DS_PASSWORD}&quot; &amp;gt; ${injected_dir}/my-script.cli

run_cli_script &quot;${injected_dir}/my-script.cli&quot;

echo &quot;End CLI configuration&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One advantage of configuring the server at S2I phase is you could gain speed when the server is being started at runtime. Your final image will be already configured by the &lt;a href=&quot;https://docs.openshift.com/container-platform/4.2/builds/understanding-buildconfigs.html&quot;&gt;OpenShift build config&lt;/a&gt;. However, currently you cannot use the standard WildFly S2I environment variables at build time, and tweak the server configuration at this stage could break possible configurations done later by the environment variables at runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;test-the-application&quot;&gt;Test the application&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The following commands shows you all the required steps to import the WildFly S2I image into CodeReady Containers, start the PostgreSQL server and assemble our demo application application that will execute the CLI script at S2I Phase.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First of all, start CodeReady Containers, import the WildFly image, create the wildfly-demo project and start the PostgreSQL server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ crc start
...
INFO Starting OpenShift cluster ... [waiting 3m]
INFO
INFO To access the cluster, first set up your environment by following 'crc oc-env' instructions
INFO Then you can access it by running 'oc login -u developer -p developer https://api.crc.testing:6443'
INFO To login as an admin, run 'oc login -u kubeadmin -p kKdPx-pjmWe-b3kuu-jeZm3 https://api.crc.testing:6443'
INFO
INFO You can now run 'crc console' and use these credentials to access the OpenShift web console
Started the OpenShift cluster
WARN The cluster might report a degraded or error state. This is expected since several operators have been disabled to lower the resource usage. For more information, please consult the documentation

$ oc login -u kubeadmin -p kKdPx-pjmWe-b3kuu-jeZm3 https://api.crc.testing:6443
Login successful.

You have access to 53 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project &quot;default&quot;.

$ oc import-image wildfly --confirm \--from quay.io/wildfly/wildfly-centos7 --insecure -n openshift
imagestream.image.openshift.io/wildfly imported

$ oc new-project wildfly-demo
Now using project &quot;wildfly-demo&quot; on server &quot;https://api.crc.testing:6443&quot;.

$ oc new-app --name database-server \
      --env POSTGRESQL_USER=postgre \
      --env POSTGRESQL_PASSWORD=admin \
      --env POSTGRESQL_DATABASE=demodb \
      postgresql
--&amp;gt; Found image 40d2ad9 (2 months old) in image stream &quot;openshift/postgresql&quot; under tag &quot;10&quot; for &quot;postgresql&quot;

    PostgreSQL 10
    -------------
    PostgreSQL is an advanced Object-Relational database management system (DBMS). The image contains the client and server programs that you'll need to create, run, maintain and access a PostgreSQL DBMS server.

    Tags: database, postgresql, postgresql10, rh-postgresql10

    * This image will be deployed in deployment config &quot;database-server&quot;
    * Port 5432/tcp will be load balanced by service &quot;database-server&quot;
      * Other containers can access this service through the hostname &quot;database-server&quot;

--&amp;gt; Creating resources ...
    imagestreamtag.image.openshift.io &quot;database-server:10&quot; created
    deploymentconfig.apps.openshift.io &quot;database-server&quot; created
    service &quot;database-server&quot; created
--&amp;gt; Success
    Application is not exposed. You can expose services to the outside world by executing one or more of the commands below:
     'oc expose svc/database-server'
    Run 'oc status' to view your app.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now let us create the OpenShift application from our JAX-RS PostgreSql demo application. We use the &lt;code&gt;cli-at-s2i&lt;/code&gt; branch:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ oc new-app --name wildfly-app \
    https://github.com/yersan/jaxrs-postgresql-demo.git#cli-at-s2i \
    --image-stream=wildfly \
    --build-env GALLEON_PROVISION_LAYERS=jaxrs-server,postgresql-driver
--&amp;gt; Found image bdf6490 (13 days old) in image stream &quot;openshift/wildfly&quot; under tag &quot;latest&quot; for &quot;wildfly&quot;

    WildFly 19.0.0.Final
    --------------------
    Platform for building and running JEE applications on WildFly 19.0.0.Final

    Tags: builder, wildfly, wildfly19

    * The source repository appears to match: jee
    * A source build using source code from https://github.com/yersan/jaxrs-postgresql-demo.git#cli-at-s2i will be created
      * The resulting image will be pushed to image stream tag &quot;wildfly-app:latest&quot;
      * Use 'oc start-build' to trigger a new build
    * This image will be deployed in deployment config &quot;wildfly-app&quot;
    * Ports 8080/tcp, 8778/tcp will be load balanced by service &quot;wildfly-app&quot;
      * Other containers can access this service through the hostname &quot;wildfly-app&quot;

--&amp;gt; Creating resources ...
    imagestream.image.openshift.io &quot;wildfly-app&quot; created
    buildconfig.build.openshift.io &quot;wildfly-app&quot; created
    deploymentconfig.apps.openshift.io &quot;wildfly-app&quot; created
    service &quot;wildfly-app&quot; created
--&amp;gt; Success
    Build scheduled, use 'oc logs -f bc/wildfly-app' to track its progress.
    Application is not exposed. You can expose services to the outside world by executing one or more of the commands below:
     'oc expose svc/wildfly-app'
    Run 'oc status' to view your app.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once we have created the &lt;code&gt;wildfly-app&lt;/code&gt; application, we can inspect the logs of the pod in charge of building the image where the S2I Phase took in place:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ oc get pods
NAME                       READY   STATUS      RESTARTS   AGE
database-server-1-deploy   0/1     Completed   0          4m36s
database-server-1-mj9z4    1/1     Running     0          4m25s
wildfly-app-1-build        0/1     Completed   0          3m38s
wildfly-app-1-deploy       0/1     Completed   0          58s
wildfly-app-1-dvnv6        1/1     Running     0          55s


$ oc logs wildfly-app-1-build
Caching blobs under &quot;/var/cache/blobs&quot;.
Getting image source signatures
Copying blob sha256:ab5ef0e5819490abe86106fd9f4381123e37a03e80e650be39f7938d30ecb530
...
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 16.275 s
[INFO] Finished at: 2020-04-01T14:15:13Z
[INFO] Final Memory: 17M/112M
[INFO] ------------------------------------------------------------------------
[WARNING] The requested profile &quot;openshift&quot; could not be activated because it does not exist.
INFO Copying deployments from target to /deployments...
'/tmp/src/target/jaxrs-postgresql-demo.war' -&amp;gt; '/deployments/jaxrs-postgresql-demo.war'
INFO Processing ImageSource mounts: s2i-config
INFO Processing ImageSource from /tmp/src/s2i-config
Running on injected_dir=/tmp/src/s2i-config
INFO Configuring the server using embedded server
INFO Duration: 4164 milliseconds
End CLI configuration
INFO Copying server to /s2i-output
...
Successfully pushed image-registry.openshift-image-registry.svc:5000/wildfly-demo/wildfly-app@sha256:6057c3bbc0a9071b102b4d0404f9592edebb0ef7c4dfbca9b00e50a2a117adcd
Push successful&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can see in the log how the image source mount named &lt;strong&gt;s2i-config&lt;/strong&gt; was processed, the value of the injected directory, in this case &lt;strong&gt;/tmp/src/s2i-config&lt;/strong&gt;, which is a directory on the filesystem of the image being assembled, and a trace that tells us the server was configured by the embedded server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let us now check test the application exposing the application to the outside world and fetching some information:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ oc expose svc/wildfly-app --name wildfly-app
route.route.openshift.io/wildfly-app exposed

$ curl http://$(oc get routes/wildfly-app --template={{.spec.host}})/jaxrs-postgresql-demo/api/tasks
[{&quot;id&quot;:1,&quot;title&quot;:&quot;This is the task-1&quot;},{&quot;id&quot;:2,&quot;title&quot;:&quot;This is the task-2&quot;},{&quot;id&quot;:3,&quot;title&quot;:&quot;This is the task-3&quot;},{&quot;id&quot;:4,&quot;title&quot;:&quot;This is the task-4&quot;},{&quot;id&quot;:5,&quot;title&quot;:&quot;This is the task-5&quot;}]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can also open a remote connection and inspect the relevant data source configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The datasources subsystem configuration is the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ oc rsh wildfly-app-1-dvnv6
sh-4.2$ cat /opt/wildfly/standalone/configuration/standalone.xml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;subsystem xmlns=&quot;urn:jboss:domain:datasources:5.0&quot;&amp;gt;
    &amp;lt;datasources&amp;gt;
        &amp;lt;datasource jndi-name=&quot;java:/jboss/datasources/PostgreSQLDS&quot; pool-name=&quot;PostgreSQLPool&quot;&amp;gt;
            &amp;lt;connection-url&amp;gt;jdbc:postgresql://database-server:5432/demodb&amp;lt;/connection-url&amp;gt;
            &amp;lt;driver&amp;gt;postgresql&amp;lt;/driver&amp;gt;
            &amp;lt;security&amp;gt;
                &amp;lt;user-name&amp;gt;postgre&amp;lt;/user-name&amp;gt;
                &amp;lt;password&amp;gt;admin&amp;lt;/password&amp;gt;
            &amp;lt;/security&amp;gt;
        &amp;lt;/datasource&amp;gt;
        &amp;lt;drivers&amp;gt;
            &amp;lt;driver name=&quot;postgresql&quot; module=&quot;org.postgresql.jdbc&quot;&amp;gt;
                &amp;lt;xa-datasource-class&amp;gt;org.postgresql.xa.PGXADataSource&amp;lt;/xa-datasource-class&amp;gt;
            &amp;lt;/driver&amp;gt;
        &amp;lt;/drivers&amp;gt;
    &amp;lt;/datasources&amp;gt;
&amp;lt;/subsystem&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now clean up the wildfly-app keeping the PostgreSQL server running, we will use it for the next example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ oc delete all -l app=wildfly-app
pod &quot;wildfly-app-1-dvnv6&quot; deleted
replicationcontroller &quot;wildfly-app-1&quot; deleted
service &quot;wildfly-app&quot; deleted
deploymentconfig.apps.openshift.io &quot;wildfly-app&quot; deleted
buildconfig.build.openshift.io &quot;wildfly-app&quot; deleted
build.build.openshift.io &quot;wildfly-app-1&quot; deleted
imagestream.image.openshift.io &quot;wildfly-app&quot; deleted&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;using-the-extension-mechanism-to-configure-the-server&quot;&gt;Using the extension mechanism to configure the Server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The extension mechanism allows the execution of arbitrary bash scripts before and after the server is configured by using environment variables. An interesting use case could be you want to tweak the server configuration after it has been configured by the environment variables, for example, there is a specific configuration that is not exposed directly by an environment variable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When the server is launched at runtime, the &lt;code&gt;$JBOSS_HOME/extensions&lt;/code&gt; directory on the image filesystem is examined to look for any of these two files:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$JBOSS_HOME/extensions/preconfigure.sh&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;$JBOSS_HOME/extensions/postconfigure.sh&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If &lt;strong&gt;preconfigure.sh&lt;/strong&gt; exists, then it is executed as an initial step before configuring the server by using the environment variables. Similarly, once the server is configured, if &lt;strong&gt;postconfigure.sh&lt;/strong&gt; exists, it is executed. Those specific scripts give you the opportunity to prepare the image for the server configuration and to execute any task once the server is configured.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the following example we are going to use our &lt;strong&gt;postconfigure.sh&lt;/strong&gt; to perform a datasource connection pool tuning configuring the following attributes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pool-use-strict-min&lt;/code&gt;: This attribute specifies whether WildFly allows the number of connections in the pool to fall below the specified minimum.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;idle-timeout-minutes&lt;/code&gt;: This attribute specifies the maximum time, in minutes, a connection may be idle before being closed. As idle connections are closed, the number of connections in the pool will shrink down to the specified minimum.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since we are going to supply our &lt;strong&gt;postconfigure.sh&lt;/strong&gt; file in our application Git repository, we will use &lt;strong&gt;install.sh&lt;/strong&gt; script to copy this file to the place expected by the WildFly S2I image so it gets executed when the server is launched.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As alternative, in OpenShift you can also supply this file by using a config map mounted to &lt;code&gt;$JBOSS_HOME/extensions&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let us examine the content of our files. First, the &lt;a href=&quot;https://github.com/yersan/jaxrs-postgresql-demo/blob/cli-extensions/s2i-config/install.sh&quot;&gt;install.sh&lt;/a&gt; file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;#!/usr/bin/env bash

injected_dir=$1

echo &quot;Copy ${injected_dir}/extensions/postconfigure.sh to ${JBOSS_HOME}/extensions/&quot;

mkdir -p &quot;${JBOSS_HOME}/extensions/&quot;
cp &quot;${injected_dir}/extensions/postconfigure.sh&quot; &quot;${JBOSS_HOME}/extensions/&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Its content is pretty simple; it creates the &lt;code&gt;${JBOSS_HOME}/extensions/&lt;/code&gt; if it does not exist yet, and copies our &lt;strong&gt;postconfigure.sh&lt;/strong&gt; script.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now let us look at the content of our &lt;a href=&quot;https://github.com/yersan/jaxrs-postgresql-demo/blob/cli-extensions/s2i-config/extensions/postconfigure.sh&quot;&gt;postconfigure.sh&lt;/a&gt; script:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;#!/usr/bin/env bash

echo &quot;Appending CLI operations to ${CLI_SCRIPT_FILE}&quot;

echo &quot;
  /subsystem=datasources/data-source=database_server-DATABASE_SERVER:write-attribute(name=pool-use-strict-min, value=true)
  /subsystem=datasources/data-source=database_server-DATABASE_SERVER:write-attribute(name=idle-timeout-minutes, value=5)
&quot; &amp;gt;&amp;gt; &quot;${CLI_SCRIPT_FILE}&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can append CLI operations to the final CLI script used by the WildFly image. You can access this file through the environment variable &lt;code&gt;CLI_SCRIPT_FILE&lt;/code&gt; which is available in this script environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The management operations executed in this script assume there is already a datasource named &lt;code&gt;database_server-DATABASE_SERVER&lt;/code&gt;. This datasource will be created and configured by using the standard environment variables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;test-the-application-2&quot;&gt;Test the application&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Assuming your database server is already configured as in our previous example, let us now create our OpenShift application using this time the &lt;code&gt;cli-extensions&lt;/code&gt; branch and by passing in the environment variables that configure our data source:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ oc new-app --name wildfly-app \
         https://github.com/yersan/jaxrs-postgresql-demo.git#cli-extensions  \
         --image-stream=wildfly \
         --env DATASOURCES=DATABASE_SERVER \
         --env DATABASE_SERVER_JNDI=&quot;java:/jboss/datasources/PostgreSQLDS&quot; \
         --env DATABASE_SERVER_DATABASE=&quot;demodb&quot; \
         --env DATABASE_SERVER_USERNAME=&quot;postgre&quot; \
         --env DATABASE_SERVER_PASSWORD=&quot;admin&quot; \
         --env DATABASE_SERVER_DRIVER=&quot;postgresql&quot; \
         --env DATABASE_SERVER_MAX_POOL_SIZE=10 \
         --env DATABASE_SERVER_MIN_POOL_SIZE=5 \
         --env DATABASE_SERVER_NONXA=true \
         --build-env GALLEON_PROVISION_LAYERS=jaxrs-server,postgresql-driver
--&amp;gt; Found image bdf6490 (13 days old) in image stream &quot;openshift/wildfly&quot; under tag &quot;latest&quot; for &quot;wildfly&quot;

    WildFly 19.0.0.Final
    --------------------
    Platform for building and running JEE applications on WildFly 19.0.0.Final

    Tags: builder, wildfly, wildfly19

    * The source repository appears to match: jee
    * A source build using source code from https://github.com/yersan/jaxrs-postgresql-demo.git#cli-extensions will be created
      * The resulting image will be pushed to image stream tag &quot;wildfly-app:latest&quot;
      * Use 'oc start-build' to trigger a new build
    * This image will be deployed in deployment config &quot;wildfly-app&quot;
    * Ports 8080/tcp, 8778/tcp will be load balanced by service &quot;wildfly-app&quot;
      * Other containers can access this service through the hostname &quot;wildfly-app&quot;

--&amp;gt; Creating resources ...
    imagestream.image.openshift.io &quot;wildfly-app&quot; created
    buildconfig.build.openshift.io &quot;wildfly-app&quot; created
    deploymentconfig.apps.openshift.io &quot;wildfly-app&quot; created
    service &quot;wildfly-app&quot; created
--&amp;gt; Success
    Build scheduled, use 'oc logs -f bc/wildfly-app' to track its progress.
    Application is not exposed. You can expose services to the outside world by executing one or more of the commands below:
     'oc expose svc/wildfly-app'
    Run 'oc status' to view your app.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let us explain a bit the uses of these environment variables. You could have noticed we have not defined how our application will connect to the database server since there is no environment variable defining the database server host name / IP or port&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;DATASOURCES&lt;/code&gt; declaration defines the prefix for our data source, in this case the prefix is &lt;code&gt;DATABASE_SERVER&lt;/code&gt;. By using this definition, the WildFly S2I configuration scripts will pick up the database host name and port from the following variables:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;PREFIX&amp;gt;_SERVICE_HOST&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;lt;PREFIX&amp;gt;_SERVICE_PORT&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have created a database server with the name &lt;strong&gt;database-server&lt;/strong&gt;, which in turns created a service with the same name. Because of the existence of this service, when our application pod is started, OpenShift will initialize the following variables:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DATABASE_SERVER_SERVICE_HOST&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DATABASE_SERVER_SERVICE_PORT&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The WildFly S2I scripts will take the database host IP and port from those variables and will create the datasource using their values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can verify the presence and the values of these variables executing a remote command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ oc get pods
NAME                       READY   STATUS      RESTARTS   AGE
database-server-1-deploy   0/1     Completed   0          46m
database-server-1-mj9z4    1/1     Running     0          46m
wildfly-app-1-build        0/1     Completed   0          23m
wildfly-app-1-deploy       0/1     Completed   0          20m
wildfly-app-1-sww2q        1/1     Running     0          20m

$ oc exec wildfly-app-1-sww2q -- env | grep &quot;DATABASE_SERVER_SERVICE_PORT\|DATABASE_SERVER_SERVICE_HOST&quot;
DATABASE_SERVER_SERVICE_PORT=5432
DATABASE_SERVER_SERVICE_HOST=172.30.142.21&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can check the data source subsystem configuration to verify it was configured as expected:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ oc exec wildfly-app-1-sww2q -- cat /opt/wildfly/standalone/configuration/standalone.xml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;subsystem xmlns=&quot;urn:jboss:domain:datasources:5.0&quot;&amp;gt;
    &amp;lt;datasources&amp;gt;
        &amp;lt;datasource jta=&quot;true&quot; jndi-name=&quot;java:/jboss/datasources/PostgreSQLDS&quot; pool-name=&quot;database_server-DATABASE_SERVER&quot; enabled=&quot;true&quot; use-java-context=&quot;true&quot; statistics-enabled=&quot;${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}}&quot;&amp;gt;
            &amp;lt;connection-url&amp;gt;jdbc:postgresql://172.30.142.21:5432/demodb&amp;lt;/connection-url&amp;gt;
            &amp;lt;driver&amp;gt;postgresql&amp;lt;/driver&amp;gt;
            &amp;lt;pool&amp;gt;
                &amp;lt;min-pool-size&amp;gt;5&amp;lt;/min-pool-size&amp;gt;
                &amp;lt;max-pool-size&amp;gt;10&amp;lt;/max-pool-size&amp;gt;
                &amp;lt;use-strict-min&amp;gt;true&amp;lt;/use-strict-min&amp;gt;
            &amp;lt;/pool&amp;gt;
            &amp;lt;security&amp;gt;
                &amp;lt;user-name&amp;gt;postgre&amp;lt;/user-name&amp;gt;
                &amp;lt;password&amp;gt;admin&amp;lt;/password&amp;gt;
            &amp;lt;/security&amp;gt;
            &amp;lt;validation&amp;gt;
                &amp;lt;valid-connection-checker class-name=&quot;org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker&quot;/&amp;gt;
                &amp;lt;validate-on-match&amp;gt;true&amp;lt;/validate-on-match&amp;gt;
                &amp;lt;background-validation&amp;gt;false&amp;lt;/background-validation&amp;gt;
                &amp;lt;exception-sorter class-name=&quot;org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter&quot;/&amp;gt;
            &amp;lt;/validation&amp;gt;
            &amp;lt;timeout&amp;gt;
                &amp;lt;idle-timeout-minutes&amp;gt;5&amp;lt;/idle-timeout-minutes&amp;gt;
            &amp;lt;/timeout&amp;gt;
        &amp;lt;/datasource&amp;gt;
        &amp;lt;drivers&amp;gt;
            &amp;lt;driver name=&quot;postgresql&quot; module=&quot;org.postgresql.jdbc&quot;&amp;gt;
                &amp;lt;xa-datasource-class&amp;gt;org.postgresql.xa.PGXADataSource&amp;lt;/xa-datasource-class&amp;gt;
            &amp;lt;/driver&amp;gt;
        &amp;lt;/drivers&amp;gt;
    &amp;lt;/datasources&amp;gt;
&amp;lt;/subsystem&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, delete the project created to clean up all the resources:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ oc delete project wildfly-demo&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yeray Borges</name></author><category term="wildfly," /><category term="galleon" /></entry><entry><title type="html">Eclipse MicroProfile OpenTracing comes to WildFly</title><link href="https://jbossorg.github.io/wildflysite/news/2020/03/19/Micro_Profile_OpenTracing_Comes_To_WildFly/" rel="alternate" type="text/html" title="Eclipse MicroProfile OpenTracing comes to WildFly" /><published>2020-03-19T14:00:00+00:00</published><updated>2020-03-19T14:00:00+00:00</updated><id>https://jbossorg.github.io/wildflysite/news/2020/03/19/Micro_Profile_OpenTracing_Comes_To_WildFly</id><content type="html" xml:base="https://jbossorg.github.io/wildflysite/news/2020/03/19/Micro_Profile_OpenTracing_Comes_To_WildFly/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Until WildFly 19 you could use Eclipse MicroProfile OpenTracing (MPOT) to trace your application using environment variables relying on the SmallRye OpenTracing implementation. With WildFly 19 you can now configure several Jaeger Tracers to be used in your applications.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;installing-jaeger&quot;&gt;Installing Jaeger&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s start a jaeger instance using docker :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run -d --name jaeger \
  -p 6831:6831/udp \
  -p 5778:5778 \
  -p 14268:14268 \
  -p 16686:16686 \
  jaegertracing/all-in-one:1.16&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, you can navigate to &lt;a href=&quot;http://localhost:16686&quot;&gt;http://localhost:16686&lt;/a&gt; to access the Jaeger UI.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;configuring-the-opentracing-subsystem&quot;&gt;Configuring the OpenTracing subsystem&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can use either UDP or TCP to send your log spans to Jaeger.  Note that those configurations are &lt;strong&gt;exclusive&lt;/strong&gt;, so if you configure a TCP endpoint then Jaeger won&amp;#8217;t use the UDP configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;using-udp&quot;&gt;Using UDP&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First we use the WildFly CLI tool to define an outbound socket binding towards the Jaeger tracer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;[standalone@localhost:9990 /] /socket-binding-group=standard-sockets/remote-destination-outbound-socket-binding=jaeger:add(host=localhost, port=6831)
{&quot;outcome&quot; =&amp;gt; &quot;success&quot;}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we can define our MPOT tracer configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;[standalone@localhost:9990 /] /subsystem=microprofile-opentracing-smallrye/jaeger-tracer=jaeger-demo:add(sampler-type=const, sampler-param=1, reporter-log-spans=true, sender-binding=jaeger)
{&quot;outcome&quot; =&amp;gt; &quot;success&quot;}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;using-tcp&quot;&gt;Using TCP&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to use TCP instead of UDP you need to configure the &lt;strong&gt;sender-endpoint&lt;/strong&gt; and set its value to &lt;strong&gt;&lt;a href=&quot;http://localhost:14268/api/traces&quot; class=&quot;bare&quot;&gt;http://localhost:14268/api/traces&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;[standalone@localhost:9990 /] /subsystem=microprofile-opentracing-smallrye/jaeger-tracer=jaeger-demo:write-attribute(name=&quot;sender-endpoint&quot;, value=&quot;http://localhost:14268/api/traces&quot;)
{
    &quot;outcome&quot; =&amp;gt; &quot;success&quot;,
    &quot;response-headers&quot; =&amp;gt; {
        &quot;operation-requires-reload&quot; =&amp;gt; true,
        &quot;process-state&quot; =&amp;gt; &quot;reload-required&quot;
    }
}
[standalone@localhost:9990 /] reload&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;setting-the-default-tracer&quot;&gt;Setting the default tracer&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s define this new tracer as the default tracer to be used by WildFly:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;[standalone@localhost:9990 /] /subsystem=microprofile-opentracing-smallrye:write-attribute(name=default-tracer, value=jaeger-demo)
{
    &quot;outcome&quot; =&amp;gt; &quot;success&quot;,
    &quot;response-headers&quot; =&amp;gt; {
        &quot;operation-requires-reload&quot; =&amp;gt; true,
        &quot;process-state&quot; =&amp;gt; &quot;reload-required&quot;
    }
}
[standalone@localhost:9990 /] reload&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead of relying on the default tracer attribute, you can use the &lt;strong&gt;web.xml&lt;/strong&gt; deployment descriptor and set the init-parameter &lt;strong&gt;smallrye.opentracing.tracer.configuration&lt;/strong&gt; to the name of the tracer to use.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;deploying-a-demo-application&quot;&gt;Deploying a demo application&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We provide a sample application at &lt;a href=&quot;https://github.com/ehsavoie/opentracing-demo&quot;&gt;https://github.com/ehsavoie/opentracing-demo&lt;/a&gt;.
This application is a simple JAXRS endpoint producing XML or JSON and failing randomly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone git@github.com:ehsavoie/opentracing-demo.git
cd opentracing-demo
mvn clean install
cp target/opentracing-demo.war $WILDFLY_HOME/standalone/deployments
$WILDFLY_HOME/bin/standalone.sh&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, you can navigate to &lt;a href=&quot;http://localhost:8080/opentracing-demo&quot;&gt;http://localhost:8080/opentracing-demo&lt;/a&gt; to access the deployed application. Generate a few traces by clicking on the links several times. &lt;em&gt;Note that in order to demonstrate error traces the application deliberately throws exceptions randomly, so don&amp;#8217;t be surprised if some requests fail.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now open the &lt;a href=&quot;http://localhost:16686&quot;&gt;Jaeger UI&lt;/a&gt; and search for traces related to the service &lt;strong&gt;opentracing-demo.war&lt;/strong&gt;, you should see the result of your previous actions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/wildflysite/assets/img/news/opentracing/jaegertraces.png&quot; alt=&quot;jaegertraces&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;WildFly Microprofile OpenTracing configuration: &lt;a href=&quot;https://docs.wildfly.org/19/Admin_Guide.html#MicroProfile_OpenTracing_SmallRye&quot;&gt;Admin Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WildScribe:  &lt;a href=&quot;https://docs.wildfly.org/19/wildscribe/subsystem/microprofile-opentracing-smallrye/jaeger-tracer/index.html&quot; class=&quot;bare&quot;&gt;https://docs.wildfly.org/19/wildscribe/subsystem/microprofile-opentracing-smallrye/jaeger-tracer/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Eclipse MicroProfile OpenTracing: &lt;a href=&quot;https://github.com/eclipse/microprofile-opentracing&quot; class=&quot;bare&quot;&gt;https://github.com/eclipse/microprofile-opentracing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Smallrye Opentracing: &lt;a href=&quot;https://github.com/smallrye/smallrye-opentracing&quot; class=&quot;bare&quot;&gt;https://github.com/smallrye/smallrye-opentracing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jaeger: &lt;a href=&quot;https://www.jaegertracing.io/&quot; class=&quot;bare&quot;&gt;https://www.jaegertracing.io/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Emmanuel Hugonnet</name></author><category term="wildfly," /><category term="microprofile," /><category term="configuration," /><category term="opentracing" /></entry><entry><title type="html">Ship Your WildFly Additions via Galleon Feature Packs</title><link href="https://jbossorg.github.io/wildflysite/news/2019/12/17/Ship-your-WildFly-additions-via-Galleon-feature-packs/" rel="alternate" type="text/html" title="Ship Your WildFly Additions via Galleon Feature Packs" /><published>2019-12-17T19:00:00+00:00</published><updated>2019-12-17T19:00:00+00:00</updated><id>https://jbossorg.github.io/wildflysite/news/2019/12/17/Ship-your-WildFly-additions-via-Galleon-feature-packs</id><content type="html" xml:base="https://jbossorg.github.io/wildflysite/news/2019/12/17/Ship-your-WildFly-additions-via-Galleon-feature-packs/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wildfly/galleon&quot;&gt;Galleon&lt;/a&gt; is a tool for provisioning Java runtimes. It comes
with &lt;a href=&quot;https://github.com/wildfly/galleon-plugins&quot;&gt;plugins&lt;/a&gt; for provisioning WildFly server
instances. We have been using it internally in WildFly to build and configure the server the past
few releases, and we recently introduced it into our OpenShift cloud image to be able to create a
server with a smaller footprint than the default.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This post will give an overview of how to use Galleon to provide your additions to WildFly so that
users can easily install them. The intended audience is someone who is familiar with writing WildFly
subsystems, and how our JBoss Modules classloading system works. We will see how this is a great way for:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Third-party vendors to ship their products which are intended to run on top of WildFly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shipping experimental features that we don’t want in the main WildFly code base yet.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Up until recently there was not really any standard way to do this. You would need one of the following options:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Have your code included in the main &lt;a href=&quot;https://github.com/wildfly/wildfly&quot;&gt;WildFly code base&lt;/a&gt;.
This is not really a realistic option for a lot of people since what we put into there is mainly
driven by where we, the WildFly community, want WildFly to go next.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Provide your subsystem via other means, for example a script to copy your additions into an existing
WildFly installation and add them to the configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;template-galleon-feature-pack-repository&quot;&gt;Template Galleon feature pack repository&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This blog post references a &lt;a href=&quot;https://github.com/wildfly/wildfly-galleon-pack-template&quot;&gt;repository&lt;/a&gt;
which extends WildFly with a generic subsystem whose only job is to make a CDI &lt;code&gt;@Produces&lt;/code&gt; method available
to deployments. The repository also contains the needed bits to have an Arquillian test suite running
outside of the WildFly code base, and of course to create the Galleon feature pack. The subsystem code
is basic, as the intent is for you to be able to use this repository as a template for creating your own
Galleon feature packs. This is not meant to be an in-depth guide, more a high level overview to get you
started.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The template repository
&lt;a href=&quot;https://github.com/wildfly/wildfly-galleon-pack-template/blob/master/README.md&quot;&gt;README&lt;/a&gt; goes into
more depth in some areas. Also, as people provide feedback, its explanation of how things work can
evolve independently of the static snapshot of information contained in this blog post.
The &lt;a href=&quot;https://github.com/wildfly/wildfly-galleon-pack-template/tree/blog-post-snapshot&quot;&gt;blog-post-snapshot&lt;/a&gt; tag is
from when this blog post was written.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;initial-run&quot;&gt;Initial run&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you are impatient, you can simply run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$mvn install
$./build/target/wildfly-&amp;lt;WildFly Version&amp;gt;-template-&amp;lt;Template Version&amp;gt;/bin/standalone.sh&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The server in the &lt;code&gt;build/target&lt;/code&gt; directory is a trimmed down version of ‘official’ WildFly with our
subsystem added.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then in another terminal window:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$mvn package wildfly:deploy -pl example&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then go to &lt;a href=&quot;http://localhost:8080/example/greeting&quot; class=&quot;bare&quot;&gt;http://localhost:8080/example/greeting&lt;/a&gt; and you will see a greeting message. This message comes
from the CDI &lt;code&gt;@Produces&lt;/code&gt; method made available by the template’s subsystem, and the language used for the
message changes as you refresh the page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will look at various ways of customising your WildFly server with our feature pack later in this post.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;core-galleon-concepts&quot;&gt;Core Galleon concepts&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://docs.wildfly.org/galleon/&quot;&gt;Galleon documentation&lt;/a&gt; discusses the concepts in depth but we
will summarise some of the core concepts which we have used for this template, mainly to make sense of
what we have done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Package&lt;/strong&gt; - A package is file system content that should be included in the built server. In our example
this means JBoss Modules for our subsystem and its dependency, and also licenses. A package may have a
&lt;strong&gt;task&lt;/strong&gt; to run when it is installed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Features&lt;/strong&gt; and &lt;strong&gt;Feature groups&lt;/strong&gt; - we use a feature to add configuration for our subsystem to the WildFly
configuration. Features can be added to groups. Features and feature groups may (among other things) have
dependencies on other features and feature groups, and may include dependencies on packages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Layers&lt;/strong&gt; - Layers split up the server into fine-grained bits, so that we can pick and choose exactly the
parts we want. For example you could ask for a WildFly server just implementing JAX-RS (and its dependencies)
and not implementing the management interfaces. The resulting server will be a lot smaller than the one you
download from &lt;a href=&quot;https://www.wildfly.org/downloads/&quot; class=&quot;bare&quot;&gt;https://www.wildfly.org/downloads/&lt;/a&gt;. Layers can have dependencies on other layers, e.g. when
asking for JAX-RS it will also install the web server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is a list of all our layers defined by WildFly and WildFly Core in our
&lt;a href=&quot;https://docs.wildfly.org/18/Admin_Guide.html#wildfly-galleon-layers&quot;&gt;documentation&lt;/a&gt;. If you want to
understand better what their dependencies are, you can look at the &lt;code&gt;layer-spec.xml&lt;/code&gt; for the various layers
that make up WildFly in the following locations&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;WildFly Core&amp;#8217;s &lt;a href=&quot;https://github.com/wildfly/wildfly-core/tree/10.0.3.Final/core-galleon-pack/src/main/resources/layers/standalone&quot;&gt;Core Feature Pack&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WildFly&amp;#8217;s &lt;a href=&quot;https://github.com/wildfly/wildfly/tree/18.0.1.Final/servlet-galleon-pack/src/main/resources/layers/standalone&quot;&gt;Servlet Feature Pack&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WildFly&amp;#8217;s &lt;a href=&quot;https://github.com/wildfly/wildfly/tree/18.0.1.Final/galleon-pack/src/main/resources/layers/standalone&quot;&gt;Full Feature Pack&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The above links take you to the versions used for WildFly 18.0.1.Final; adjust them to see what is
available in other server versions. Once you have read this article and browsed the template repository
you should be able to work out what all those files contain.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-template-subsystem-galleon-feature-pack&quot;&gt;The template subsystem Galleon feature pack&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This section will explain our feature pack. Let’s take a quick look at its packages, feature groups, layers,
feature pack configuration, and the build.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;packages&quot;&gt;Packages&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have some packages which contain the JBoss Modules for our subsystem and its dependency. These can be
found under the
&lt;a href=&quot;https://github.com/wildfly/wildfly-galleon-pack-template/tree/master/galleon-pack/src/main/resources/modules/system/layers/base&quot;&gt;galleon-pack/src/main/resources/modules/system/layers/base/&lt;/a&gt;
directory. The subsystem code is in the &lt;a href=&quot;https://github.com/wildfly/wildfly-galleon-pack-template/tree/master/subsystem&quot;&gt;subsystem/&lt;/a&gt;
folder of the project, while the example subsystem dependency (which contains the CDI &lt;code&gt;@Produces&lt;/code&gt; method
mentioned) code is in the
&lt;a href=&quot;https://github.com/wildfly/wildfly-galleon-pack-template/tree/master/subsystem&quot;&gt;dependency/&lt;/a&gt;
folder of the project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition we have some packages to deal with installing licenses for your added libraries. We won’t go into
details of that here. See the the template &lt;a href=&quot;https://github.com/wildfly/wildfly-galleon-pack-template/blob/master/README.md&quot;&gt;README&lt;/a&gt; for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;feature-groups&quot;&gt;Feature Groups&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We define a single feature group in &lt;a href=&quot;https://github.com/wildfly/wildfly-galleon-pack-template/blob/master/galleon-pack/src/main/resources/feature_groups/template-subsystem.xml&quot;&gt;galleon-pack/src/main/resources/feature_groups/template-subsystem.xml&lt;/a&gt;.
The group contains the &lt;code&gt;&amp;lt;feature spec=&quot;subsystem.template-subsystem&quot;/&amp;gt;&lt;/code&gt; for our subsystem. The value of
'spec' used for these feature specifications is of the form&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;subsystem.&amp;lt;subsystem name in the model&amp;gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;and it essentially configures the subsystem. In this case &lt;code&gt;&amp;lt;subsystem name in the model&amp;gt;&lt;/code&gt; is 'template-subsystem',
and this configuration results in a&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;/subsystem=template-subsystem:add()&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;when provisioning the server. Our subsystem is empty, if it had some attributes that need setting they would also be
defined in the feature spec.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;layers&quot;&gt;Layers&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wildfly/wildfly-galleon-pack-template/blob/master/galleon-pack/src/main/resources/layers/standalone/template-layer/layer-spec.xml&quot;&gt;galleon-pack/src/main/resources/layers/standalone/template-layer/layer-spec.xml&lt;/a&gt;
contains our single layer called ‘template-layer’. It adds dependencies on the following other constructs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;strong&gt;dependency&lt;/strong&gt; on the &lt;code&gt;cdi&lt;/code&gt; layer. This is needed so that when we install our layer, which uses CDI,
Galleon will automatically pull in the CDI dependencies as well if they are not already there.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;feature group&lt;/strong&gt; we already discussed. When this layer is installed, our subsystem gets configured.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Any additional &lt;strong&gt;packages&lt;/strong&gt; (i.e. content) needed. In this case there are none, since we add the dependency
on the subsystem’s extension module in wildfly-feature-pack-build.xml as we see in the next section. The
&lt;code&gt;layer-spec.xml&lt;/code&gt; and template &lt;a href=&quot;https://github.com/wildfly/wildfly-galleon-pack-template/blob/master/README.md&quot;&gt;README&lt;/a&gt;
contain some more information about this.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;feature-pack-configuration&quot;&gt;Feature pack configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wildfly/wildfly-galleon-pack-template/blob/master/galleon-pack/wildfly-feature-pack-build.xml&quot;&gt;galleon-pack/wildfly-feature-pack-build.xml&lt;/a&gt;
is used to provision new features (the template
&lt;a href=&quot;https://github.com/wildfly/wildfly-galleon-pack-template/blob/master/README.md&quot;&gt;README&lt;/a&gt;
explains how to install additions which have no configuration). It adds our extension module
&lt;code&gt;org.wildfly.extension.template-subsystem&lt;/code&gt; to the configuration. Galleon is smart enough to inspect this
module’s dependencies and automatically add our &lt;code&gt;org.wildfly.template-dependency&lt;/code&gt; module.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The file also sets up the feature packs we depend upon in order to provide the underlying server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;build&quot;&gt;Build&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally we have the feature pack build in
&lt;a href=&quot;https://github.com/wildfly/wildfly-galleon-pack-template/blob/master/galleon-pack/pom.xml&quot;&gt;galleon-pack/pom.xml&lt;/a&gt;.
It contains the &lt;code&gt;wildfly-galleon-maven-plugin&lt;/code&gt; which creates the Galleon feature pack. Note that it uses
the &lt;code&gt;build-feature-pack&lt;/code&gt; goal which is needed to add a new subsystem along with the mentioned
entry in wildfly-feature-pack-build.xml.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When building the &lt;code&gt;galleon-pack/&lt;/code&gt; module you can see what the feature pack contains in the
&lt;code&gt;galleon-pack/target/layout/org.wildfly.extras.galleon-feature-pack-template/template-galleon-pack/&amp;lt;version&amp;gt;/&lt;/code&gt;
directory to help you figure out what is missing if your feature pack does not work the way you expected.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;provisioning-a-server&quot;&gt;Provisioning a server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are a few ways we can provision a server to include our feature pack. They are via a Maven plugin,
or via Galleon CLI. Galleon CLI has a few different ways to provision a server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;maven-plugin&quot;&gt;Maven plugin&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using the &lt;code&gt;wildfly-galleon-maven-plugin&lt;/code&gt; Maven plugin isn’t really for end users, but it is very handy
to be able to use it from within our project. For example,
&lt;a href=&quot;https://github.com/wildfly/wildfly-galleon-pack-template/blob/master/build/pom.xml&quot;&gt;build/pom.xml&lt;/a&gt;
provisions a server that we can use to verify that our feature pack works. Earlier in this post, we already
played with the server in the &lt;code&gt;build/target&lt;/code&gt; directory and deployed our example into that. Also, in our
testsuite, &lt;a href=&quot;https://github.com/wildfly/wildfly-galleon-pack-template/blob/master/testsuite/integration/subsystem/pom.xml&quot;&gt;testsuite/integration/subsystem/pom.xml&lt;/a&gt;
provisions a server to run the Arquillian tests against.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In both cases we use the &lt;code&gt;provision&lt;/code&gt; goal of the &lt;code&gt;galleon-maven-plugin&lt;/code&gt; to provision a server. It lists
the feature packs that our feature pack depends on (note that they are 'transitive') as well as the layers
to install into our server. However, the layers used are slightly different in the two cases since we are
doing two different things.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;They both need our &lt;code&gt;template-layer&lt;/code&gt; of course.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;build/&lt;/code&gt; version is used to run our example from the &lt;code&gt;example/&lt;/code&gt; directory. As this uses a REST endpoint,
we need the &lt;code&gt;jaxrs&lt;/code&gt; layer to provide this functionality. Also, the &lt;code&gt;wildfly:deploy&lt;/code&gt; goal we used to deploy
the application uses the management interfaces, so it also needs the &lt;code&gt;management&lt;/code&gt; layer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;testsuite&lt;/code&gt; version, on the other hand, does not use REST for the test, so we just use the plain
&lt;code&gt;web-server&lt;/code&gt; layer (the &lt;code&gt;jaxrs&lt;/code&gt; layer used in &lt;code&gt;build/&lt;/code&gt; depends on this &lt;code&gt;web-server&lt;/code&gt; layer). Also, since
Arquillian uses JMX to do the interactions with the server, we also need the &lt;code&gt;jmx-remoting&lt;/code&gt; layer.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;galleon-cli&quot;&gt;Galleon CLI&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Galleon CLI is explained in more detail in the
&lt;a href=&quot;https://docs.wildfly.org/galleon/#_galleon_cli_tool&quot;&gt;Galleon documentation&lt;/a&gt;. We will look at a few
ideas for how to provision a WildFly server containing our plugin. There are probably other ways too,
Galleon is very powerful! The two main ways to do this are to install the various parts manually, or
to provision it from an xml file. Doing it manually is powerful, but there can be a lot of commands to
remember. If you use an xml file to provision it, everything is contained in that file and you can run
it again and again to provision servers using a simpler to remember command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To use the Galleon CLI you need to &lt;a href=&quot;https://github.com/wildfly/galleon-plugins/releases&quot;&gt;download&lt;/a&gt; it.
The following examples assume that you have added the &lt;code&gt;bin/&lt;/code&gt; folder of the distribution to your
PATH (This is where the galleon.sh command comes from in the following examples).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will look at how to provision the server via the two main mechanisms, then the &lt;a href=&quot;#trying-the-provisioned-server&quot;&gt;Trying the provisioned server&lt;/a&gt;
section below tells you how to run your application to check that our example subsystem got installed into
the server and works as expected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;manual-galleon-cli-installation&quot;&gt;Manual Galleon CLI installation&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To install additional feature packs via Galleon you generally follow the following two steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Install the main server - here we can for example choose the version of the main server,
and also trim it down if we don’t want the full server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the feature pack. Note that this part is only possible if the main server was provisioned
via Galleon. It is currently not possible to install feature packs into e.g. the unzipped zip from the
&lt;a href=&quot;https://wildfly.org/downloads/&quot;&gt;wildfly.org/downloads&lt;/a&gt; page.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;install-main-server&quot;&gt;Install main server&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To install the main server we can do:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$galleon.sh install wildfly:current --dir=wildfly&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This installs all of (i.e. the same as the downloaded zip) the latest WildFly version (at the time
of writing 18.0.1.Final) into the directory specified by the &lt;code&gt;--dir&lt;/code&gt; argument. In this case I am using a
relative child directory called &lt;code&gt;wildfly/&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to install a particular version of WildFly you can append the version to &lt;code&gt;wildfly:current&lt;/code&gt;. E.g.:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;wildfly:current#18.0.0.Final&lt;/code&gt; - installs WildFly 18.0.0.Final.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;wildfly:current#19.0.0.Beta1-SNAPSHOT&lt;/code&gt; - installs WildFly from locally built SNAPSHOT maven artifacts.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to trim the base server that we install (similar to what we did in the testsuite and the
example server build), you can specify which layers to install by passing in the &lt;code&gt;--layers&lt;/code&gt;
option. To install the same server as we had in the &lt;code&gt;build/target/&lt;/code&gt; directory that we used to run the example
above, you can run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$galleon.sh install wildfly:current --dir=wildfly --layers=jaxrs,management&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that we did not install our &lt;code&gt;template-layer&lt;/code&gt; because this is unknown in the main
WildFly feature pack. We will add it in the next step.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;install-feature-pack&quot;&gt;Install feature pack&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now to install our layer, we run the following command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$galleon.sh install org.wildfly.extras.galleon-feature-pack-template:template-galleon-pack:1.0.0.Alpha-SNAPSHOT --layers=template-layer --dir=wildfly&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We specify the same directory that we installed the server into in the last step by specifying the same value for
&lt;code&gt;--dir&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;org.wildfly.extras.galleon-feature-pack-template:template-galleon-pack:1.0.0.Alpha-SNAPSHOT&lt;/code&gt;
is the Maven GAV of the Galleon feature pack (i.e. what we have in
&lt;a href=&quot;https://github.com/wildfly/wildfly-galleon-pack-template/blob/master/galleon-pack/pom.xml&quot;&gt;wildfly-galleon-pack-template/blob/master/galleon-pack/pom.xml&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you went with the trimmed server in the previous step, and you look at
&lt;code&gt;wildfly/standalone/configuration/standalone.xml&lt;/code&gt;, you should see that both the &lt;code&gt;template-subsystem&lt;/code&gt;
and the &lt;code&gt;weld&lt;/code&gt; subsystems were added in this second step. Weld is our CDI implementation. As we have
seen the 'cdi' layer is a dependency of our layer, so Galleon pulls it in too!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;See the &lt;a href=&quot;#trying-the-provisioned-server&quot;&gt;Trying the provisioned server&lt;/a&gt; section below for how to start your server and give it a quick
sanity check by deploying and running the example.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;galleon-cli-provision-from-xml-file&quot;&gt;Galleon CLI provision from xml file&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An alternative to having to type all the CLI commands we saw every time you want to provision a server is
to use an XML file as input to the Galleon CLI. There is an example in
&lt;a href=&quot;https://github.com/wildfly/wildfly-galleon-pack-template/blob/master/provision.xml&quot;&gt;provision.xml&lt;/a&gt;.
This file contains all the information needed to provision our server, and as you can see, it lists the
feature pack(s) we depend on, and the feature pack implemented in the template repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For each of those we specify the Maven GAV, as in the previous section. We can set what to include
from each feature pack (Refer to the Galleon documentation for more in-depth explanation of what
each setting does). Finally, we say that we want the &lt;code&gt;cloud-profile&lt;/code&gt;
and &lt;code&gt;template-layer&lt;/code&gt; layers. &lt;code&gt;cloud-profile&lt;/code&gt; is just to give you another example base server,
we could have used the same layers as in the previous section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To provision the server, you now simply run the following command:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$galleon.sh provision /path/to/provision.xml --dir=wildfly&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now you can start the server and run the example as outlined in the &lt;a href=&quot;#trying-the-provisioned-server&quot;&gt;Trying the provisioned server&lt;/a&gt; section.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;trying-the-provisioned-server&quot;&gt;Trying the provisioned server&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/wildfly/wildfly-galleon-pack-template/tree/master/example&quot;&gt;example/&lt;/a&gt; folder contains
the sample application that you can deploy into the server. The steps to do this are the same whether you are
using the example server from the &lt;code&gt;build/&lt;/code&gt; directory that we saw in the start of this post, or any of the
Galleon CLI mechanisms.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The example itself is very simple, consisting of a single
&lt;a href=&quot;https://github.com/wildfly/wildfly-galleon-pack-template/blob/master/example/src/main/java/org/wildfly/extension/galleon/pack/template/example/JaxRsResource.java&quot;&gt;REST endpoint&lt;/a&gt;
which is injected with a bean made available by the CDI &lt;code&gt;@Produces&lt;/code&gt; method from the template subsystem dependency.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To run it, first start the server by running (the value of &lt;code&gt;JBOSS_HOME&lt;/code&gt; is the root of the built server, which
depends on which flavour of the provisioned server you are trying):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$&quot;${JBOSS_HOME}&quot;/bin/standalone.sh&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then to deploy the application, in another terminal window in the checkout folder of the template project, run:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$mvn package wildfly:deploy -pl example/&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then go to &lt;a href=&quot;http://localhost:8080/example/greeting&quot; class=&quot;bare&quot;&gt;http://localhost:8080/example/greeting&lt;/a&gt;, which will output the message created by the CDI producer.
As you refresh, the message will change.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;adapting-the-template-for-your-use&quot;&gt;Adapting the template for your use&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To provision your own subsystem you can copy this template, but of course you should try to give your
subsystem, modules, Galleon constructs, and Java package and class names sensible names for your WildFly
addition. There are quite a few things that need changing, and I have tried to add some hints in the template
source code in the form of TODO comments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This template has not been officially released to Maven. Since it doesn’t do anything useful apart from provide
a framework for you to copy, it is still using a SNAPSHOT version. For your purposes you should create real
tags and releases, and deploy to e.g. Maven Central. Then you can advertise your feature pack to the world,
and it will be easy for people to provision WildFly servers containing your super-cool feature!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, if something is not clear in the template repository, please either open a pull request or an
&lt;a href=&quot;https://github.com/wildfly/wildfly-galleon-pack-template/issues&quot;&gt;issue&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Kabir Khan</name></author><category term="wildfly," /><category term="galleon" /></entry><entry><title type="html">WildFly 18.0.1 is released!</title><link href="https://jbossorg.github.io/wildflysite/news/2019/11/14/WildFly-1801-Released/" rel="alternate" type="text/html" title="WildFly 18.0.1 is released!" /><published>2019-11-14T14:00:00+00:00</published><updated>2019-11-14T14:00:00+00:00</updated><id>https://jbossorg.github.io/wildflysite/news/2019/11/14/WildFly-1801-Released</id><content type="html" xml:base="https://jbossorg.github.io/wildflysite/news/2019/11/14/WildFly-1801-Released/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;WildFly 18.0.1 Final is now available &lt;a href=&quot;{base_url}/downloads&quot;&gt;for download&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s been over a month since the WildFly 18 release and we had a number of important bug fixes and component upgrades ready to go so we decided to do a WildFly 18.0.1 release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The full list of issues resolved in WildFly 18.0.1 is available &lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12313721&amp;amp;version=12343077&quot;&gt;here&lt;/a&gt;. Issues resolved in the WildFly Core 10.0.2 and 10.0.3 releases included with WildFly 18.0.1 are available &lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12315422&amp;amp;version=12343078&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12315422&amp;amp;version=12343166&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now it&amp;#8217;s time to get back to the exciting work on MicroProfile 3.2 support for WildFly 19!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Brian Stansberry</name></author><category term="announcement," /><category term="release" /></entry><entry><title type="html">Configuring WildFly S2I image Datasources on OpenShift</title><link href="https://jbossorg.github.io/wildflysite/news/2019/11/11/WildFly-s2i-openshift-Datasource-configuration/" rel="alternate" type="text/html" title="Configuring WildFly S2I image Datasources on OpenShift" /><published>2019-11-11T00:00:00+00:00</published><updated>2019-11-11T00:00:00+00:00</updated><id>https://jbossorg.github.io/wildflysite/news/2019/11/11/WildFly-s2i-openshift-Datasource-configuration</id><content type="html" xml:base="https://jbossorg.github.io/wildflysite/news/2019/11/11/WildFly-s2i-openshift-Datasource-configuration/">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this guide, we will show you how we can containerize a JAX-RS PostgreSQL demo application to run on WildFly in a local OpenShift cluster. We will explore the different options we have to configure the data source subsystem in a cloud-based infrastructure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First of all, we will use the &lt;a href=&quot;https://github.com/wildfly-extras/wildfly-datasources-galleon-pack&quot;&gt;WildFly Datasources Galleon Pack&lt;/a&gt; to bring in the PostgreSQL data source and driver configuration to our WildFly server. Later, we will show you how you can configure more aspects of the data source subsystem beyond the capabilities given by this Galleon pack.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This practical guide requires &lt;a href=&quot;https://github.com/code-ready/crc&quot;&gt;Red Hat CodeReady Containers&lt;/a&gt; to install an OpenShift cluster for development purposes on your system. On this local cluster, we will deploy a PostgreSQL database server and this simple &lt;a href=&quot;https://github.com/yersan/jaxrs-postgresql-demo&quot;&gt;Jaxrs PostgreSQL demo&lt;/a&gt; application running on WildFly. It assumes you have basic knowledge of OpenShift.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;preparing-the-openshift-cluster-and-postgresql-database-server&quot;&gt;Preparing the OpenShift cluster and PostgreSQL Database Server&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The CodeReady Containers &lt;a href=&quot;https://code-ready.github.io/crc/&quot;&gt;Getting Started Guide&lt;/a&gt; describes pretty well how to install, configure, and start a local OpenShift cluster for development purposes; you only have to follow the installation instructions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the time this post was written, CodeReady Containers does not ship the Wildfly image stream by default. The easiest way to create an image stream is by using the &lt;code&gt;oc import-image&lt;/code&gt; to import the WildFly image from &lt;a href=&quot;https://quay.io/organization/wildfly&quot;&gt;quay.io/wildfly&lt;/a&gt;. We import the image under the &lt;code&gt;openshift&lt;/code&gt; namespace to make the image available to all projects and to avoid repeating the same step for each project we create. Finally, we verify the image is imported by using &lt;code&gt;oc get is&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ crc start
...
INFO Starting OpenShift cluster ... [waiting 3m]
INFO
INFO To access the cluster, first set up your environment by following 'crc oc-env' instructions
INFO Then you can access it by running 'oc login -u developer -p developer https://api.crc.testing:6443'
INFO To login as an admin, username is 'kubeadmin' and password is wyozw-5ywAy-5yoap-7rj8q
INFO
INFO You can now run 'crc console' and use these credentials to access the OpenShift web console
The OpenShift cluster is running

$ oc login -u kubeadmin -p wyozw-5ywAy-5yoap-7rj8q https://api.crc.testing:6443
Login successful.

You have access to 51 projects, the list has been suppressed. You can list all projects with 'oc projects'

Using project &quot;default&quot;.

$ oc import-image wildfly --confirm \--from quay.io/wildfly/wildfly-centos7 --insecure -n openshift
imagestream.image.openshift.io/wildfly imported

$ oc get is -n openshift | grep wildfly
NAME      IMAGE REPOSITORY                                                          TAGS     UPDATED
wildfly   default-route-openshift-image-registry.apps-crc.testing/default/wildfly   latest   8 seconds ago&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is all that we need to configure the local OpenShift cluster to work with WildFly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let us begin creating a new project for our demo:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ oc new-project wildfly-demo
Now using project &quot;wildfly-demo&quot; on server &quot;https://api.crc.testing:6443&quot;.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, let us deploy our database server image. CodeReady Containers comes with a PostgreSQL image by default, so we do not need to import it. For our testing purposes, we need a basic server configured with a database name, user, and password.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;oc new-app&lt;/code&gt; command creates the resources required to deploy the postgresql image:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ oc new-app --name database-server \
     --env POSTGRESQL_USER=postgre \
     --env POSTGRESQL_PASSWORD=admin \
     --env POSTGRESQL_DATABASE=demodb \
     postgresql
--&amp;gt; Found image f427c5c (2 months old) in image stream &quot;openshift/postgresql&quot; under tag &quot;10&quot; for &quot;postgresql&quot;

    PostgreSQL 10
    -------------
    PostgreSQL is an advanced Object-Relational database management system (DBMS). The image contains the client and server programs that you'll need to create, run, maintain and access a PostgreSQL DBMS server.

    Tags: database, postgresql, postgresql10, rh-postgresql10

    * This image will be deployed in deployment config &quot;database-server&quot;
    * Port 5432/tcp will be load balanced by service &quot;database-server&quot;
      * Other containers can access this service through the hostname &quot;database-server&quot;

--&amp;gt; Creating resources ...
    imagestreamtag.image.openshift.io &quot;database-server:10&quot; created
    deploymentconfig.apps.openshift.io &quot;database-server&quot; created
    service &quot;database-server&quot; created
--&amp;gt; Success
    Application is not exposed. You can expose services to the outside world by executing one or more of the commands below:
     'oc expose svc/database-server'
    Run 'oc status' to view your app.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead of using directly postgresql image stream with the &lt;code&gt;new-app&lt;/code&gt; command, you can use one of the available templates. We have used the image stream directly here as an example to clear up better what a template does behind scenes.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice here the output of &lt;code&gt;new-app&lt;/code&gt; describes for us which resources have been created. One important resource is the &lt;code&gt;database-server&lt;/code&gt; service which is the internal load balancer service that connects to the data base server. Our URL connection will use this service name to connect to the database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We can get the status of the pod created with the command &lt;code&gt;oc get pods&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ oc get pods
NAME                       READY   STATUS      RESTARTS   AGE
database-server-1-5l6fd    1/1     Running     0          44s
database-server-1-deploy   0/1     Completed   0          57s&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;new-app&lt;/code&gt; command has created two pods, the one with -deploy suffix is the pod created by a &lt;a href=&quot;https://docs.openshift.com/container-platform/4.2/applications/deployments/what-deployments-are.html&quot;&gt;deployment config resource&lt;/a&gt; to create application pods. The other one is the application pod running our database server. We can verify the database was created opening a remote shell connection on this pod:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ oc rsh database-server-1-5l6fd
sh-4.2$ psql demodb
psql (10.6)
Type &quot;help&quot; for help.

demodb=# \q
sh-4.2$ exit&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;configuring-the-wildfly-data-source&quot;&gt;Configuring the WildFly Data Source&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now is time to create our application container image that includes the WildFly server and our demo application. The &lt;code&gt;oc new-app&lt;/code&gt; is also used for such purposes. Unlike the previous configuration of the database server where we were building a new container from an existing image stream, now we are going to create a new image combining the WildFly image stream with an external GitHub application source code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;OpenShift takes care of the details and creates a final image containing the server and the application. Internally, it uses the &lt;a href=&quot;https://github.com/openshift/source-to-image&quot;&gt;Source-To-Image (S2I) tool&lt;/a&gt;. During this process, the WildFly server is provisioned by Galleon, and our demo JAX-RS application is built and copied into the &lt;code&gt;$WILDFLY_HOME/deployments&lt;/code&gt; folder.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We do not need the full server to run our example, for example, we do not need the ejb3, remoting or messaging subsystems. We can specify a set of &lt;a href=&quot;https://docs.wildfly.org/galleon/#_layers&quot;&gt;Galleon layers&lt;/a&gt; by using the &lt;code&gt;GALLEON_PROVISION_LAYERS&lt;/code&gt; environment variable to reduce the server footprint. This environment variable contains a comma-separated list of layer names you want to use to provision your server during the S2I phase. It is important to understand that the server provisioning is done in OpenShift by a &lt;a href=&quot;https://docs.openshift.com/container-platform/4.2/builds/understanding-buildconfigs.html&quot;&gt;Build Config&lt;/a&gt; resource, so we need to make this variable available as a build environment variable. Notice that these details usually are hidden to you when you are using a template or an Operator.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Check &lt;a href=&quot;https://wildfly.org/news/2019/03/01/Galleon_Openshift/&quot;&gt;this post&lt;/a&gt; to learn more about OpenShift and Galleon layers.&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For our demo example on OpenShift, we instruct Galleon to provision our server with these two Galleon Layers: &lt;code&gt;jaxrs-server&lt;/code&gt; and &lt;code&gt;postgresql-datasource&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/wildfly/wildfly-cekit-modules/blob/master/jboss/container/wildfly/galleon/fp-content/base-layers/added/src/main/resources/layers/standalone/jaxrs-server/layer-spec.xml&quot;&gt;jaxrs-server layer&lt;/a&gt; provisions the server with some features needed to run our example e.g. cdi, jaxrs, jpa, undertow, transactions, datasources. It belongs to the default Galleon pack which is used to provision the default WildFly server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/wildfly-extras/wildfly-datasources-galleon-pack/blob/master/src/main/resources/layers/standalone/postgresql-datasource/layer-spec.xml&quot;&gt;postgresql-datasource layer&lt;/a&gt; comes from &lt;a href=&quot;https://github.com/wildfly-extras/wildfly-datasources-galleon-pack&quot;&gt;WildFly Datasources Galleon Pack&lt;/a&gt;. This layer adds to the server the PostgreSQL drivers and specific PostgreSQL data source configuration. It allows us to configure the PostgreSQL data source by using the following variables:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;POSTGRESQL_DATABASE&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;POSTGRESQL_SERVICE_PORT&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;POSTGRESQL_SERVICE_HOST&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;POSTGRESQL_PASSWORD&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;POSTGRESQL_USER&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let us create our WildFly container then configuring the data source to connect to our PostgreSQL server running in a different pod:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ oc new-app --name wildfly-app \
     https://github.com/yersan/jaxrs-postgresql-demo.git \
     --image-stream=wildfly \
     --env POSTGRESQL_SERVICE_HOST=database-server \
     --env POSTGRESQL_SERVICE_PORT=5432 \
     --env POSTGRESQL_USER=postgre \
     --env POSTGRESQL_PASSWORD=admin \
     --env POSTGRESQL_DATABASE=demodb \
     --env POSTGRESQL_DATASOURCE=PostgreSQLDS \
     --build-env GALLEON_PROVISION_LAYERS=jaxrs-server,postgresql-datasource
--&amp;gt; Found image 38b29f9 (3 weeks old) in image stream &quot;openshift/wildfly&quot; under tag &quot;latest&quot; for &quot;wildfly&quot;

    WildFly 18.0.0.Final
    --------------------
    Platform for building and running JEE applications on WildFly 18.0.0.Final

    Tags: builder, wildfly, wildfly18

    * The source repository appears to match: jee
    * A source build using source code from https://github.com/yersan/jaxrs-postgresql-demo.git will be created
      * The resulting image will be pushed to image stream tag &quot;wildfly-app:latest&quot;
      * Use 'oc start-build' to trigger a new build
    * This image will be deployed in deployment config &quot;wildfly-app&quot;
    * Ports 8080/tcp, 8778/tcp will be load balanced by service &quot;wildfly-app&quot;
      * Other containers can access this service through the hostname &quot;wildfly-app&quot;

--&amp;gt; Creating resources ...
    imagestream.image.openshift.io &quot;wildfly-app&quot; created
    buildconfig.build.openshift.io &quot;wildfly-app&quot; created
    deploymentconfig.apps.openshift.io &quot;wildfly-app&quot; created
    service &quot;wildfly-app&quot; created
--&amp;gt; Success
    Build scheduled, use 'oc logs -f bc/wildfly-app' to track its progress.
    Application is not exposed. You can expose services to the outside world by executing one or more of the commands below:
     'oc expose svc/wildfly-app'
    Run 'oc status' to view your app.

$ oc get pods
NAME                       READY   STATUS      RESTARTS   AGE
database-server-1-5l6fd    1/1     Running     0          10m
database-server-1-deploy   0/1     Completed   0          10m
wildfly-app-1-build        0/1     Completed   0          3m50s
wildfly-app-1-deploy       0/1     Completed   0          55s
wildfly-app-1-sdk2m        1/1     Running     0          46s

$ oc expose svc/wildfly-app --name wildfly-app
route.route.openshift.io/wildfly-app exposed&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;new-app&lt;/code&gt; command creates three additional pods in the OpenShift cluster; one build config (-build suffix, completed), one deploy config (-deploy suffix, completed) and our running application pod.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Remember, the build config is the resource that creates the container image using the S2I tool, builds your application and provisions the server using Galleon. The deployment config is the resource that starts the new container image created by the build config.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can review the pod logs issuing the following command &lt;code&gt;oc log pod/{pod_name}&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we can verify our application is working. We exposed the application to the outside world using &lt;code&gt;oc expose&lt;/code&gt;. If we want to access to our container via the web, we need to know its host name. We can get this value by inspecting the &lt;code&gt;routes/wildfly-app&lt;/code&gt; resource. Once we know the host name, we can use &lt;code&gt;curl&lt;/code&gt; to fetch some information from our application:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ oc get routes/wildfly-app --template={{.spec.host}}
wildfly-app-wildfly-demo.apps-crc.testing

$ curl http://wildfly-app-wildfly-demo.apps-crc.testing/jaxrs-postgresql-demo/api/tasks
[{&quot;id&quot;:1,&quot;title&quot;:&quot;This is the task-1&quot;},{&quot;id&quot;:2,&quot;title&quot;:&quot;This is the task-2&quot;},{&quot;id&quot;:3,&quot;title&quot;:&quot;This is the task-3&quot;},{&quot;id&quot;:4,&quot;title&quot;:&quot;This is the task-4&quot;},{&quot;id&quot;:5,&quot;title&quot;:&quot;This is the task-5&quot;}]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, let us take a look at our current datasources subsystem configuration to see how it was configured. We can open a remote session on our WildFly running pod and examine the standalone.xml file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ oc rsh wildfly-app-1-sdk2m
sh-4.2$ cat /opt/wildfly/standalone/configuration/standalone.xml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The datasources subsystem configuration is the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;subsystem xmlns=&quot;urn:jboss:domain:datasources:5.0&quot;&amp;gt;
    &amp;lt;datasources&amp;gt;
        &amp;lt;datasource jndi-name=&quot;java:jboss/datasources/${env.POSTGRESQL_DATASOURCE,env.OPENSHIFT_POSTGRESQL_DATASOURCE:PostgreSQLDS}&quot; pool-name=&quot;PostgreSQLDS&quot; enabled=&quot;true&quot; use-java-context=&quot;true&quot; use-ccm=&quot;true&quot; statistics-enabled=&quot;${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}}&quot;&amp;gt;
            &amp;lt;connection-url&amp;gt;jdbc:postgresql://${env.POSTGRESQL_SERVICE_HOST, env.OPENSHIFT_POSTGRESQL_DB_HOST}:${env.POSTGRESQL_SERVICE_PORT, env.OPENSHIFT_POSTGRESQL_DB_PORT}/${env.POSTGRESQL_DATABASE, env.OPENSHIFT_POSTGRESQL_DB_NAME}&amp;lt;/connection-url&amp;gt;
            &amp;lt;driver&amp;gt;postgresql&amp;lt;/driver&amp;gt;
            &amp;lt;pool&amp;gt;
                &amp;lt;flush-strategy&amp;gt;IdleConnections&amp;lt;/flush-strategy&amp;gt;
            &amp;lt;/pool&amp;gt;
            &amp;lt;security&amp;gt;
                &amp;lt;user-name&amp;gt;${env.POSTGRESQL_USER, env.OPENSHIFT_POSTGRESQL_DB_USERNAME}&amp;lt;/user-name&amp;gt;
                &amp;lt;password&amp;gt;${env.POSTGRESQL_PASSWORD, env.OPENSHIFT_POSTGRESQL_DB_PASSWORD}&amp;lt;/password&amp;gt;
            &amp;lt;/security&amp;gt;
            &amp;lt;validation&amp;gt;
                &amp;lt;check-valid-connection-sql&amp;gt;SELECT 1&amp;lt;/check-valid-connection-sql&amp;gt;
                &amp;lt;background-validation&amp;gt;true&amp;lt;/background-validation&amp;gt;
                &amp;lt;background-validation-millis&amp;gt;60000&amp;lt;/background-validation-millis&amp;gt;
            &amp;lt;/validation&amp;gt;
        &amp;lt;/datasource&amp;gt;
        &amp;lt;drivers&amp;gt;
            &amp;lt;driver name=&quot;postgresql&quot; module=&quot;org.postgresql.jdbc&quot;&amp;gt;
                &amp;lt;xa-datasource-class&amp;gt;org.postgresql.xa.PGXADataSource&amp;lt;/xa-datasource-class&amp;gt;
            &amp;lt;/driver&amp;gt;
        &amp;lt;/drivers&amp;gt;
    &amp;lt;/datasources&amp;gt;
&amp;lt;/subsystem&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see in the configuration file, Galleon has prepared the data source subsystem to be configured by the WildFly Datasources Galleon Pack environment variables. You can also verify that a PostgreSQL driver is added as a JBoss module in the server:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sh-4.2$ ls /opt/wildfly/modules/org/postgresql/jdbc/main/
module.xml  postgresql-9.4.1211.jar&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This sort of configuration done by using the WildFly Datasource Galleon Pack is simple and easy to use. However, it has some limitations; there are some attributes related to the datasource that cannot be configured, e.g. connection min/max pool size, flush-strategy, background-validation-millis. We cannot configure more than one datasource of the same type. In the following section, we explain how you can achieve this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before moving to the next part, let us remove all unused configurations:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ oc delete all -l app=wildfly-app
pod &quot;wildfly-app-1-84lh6&quot; deleted
replicationcontroller &quot;wildfly-app-1&quot; deleted
service &quot;wildfly-app&quot; deleted
deploymentconfig.apps.openshift.io &quot;wildfly-app&quot; deleted
buildconfig.build.openshift.io &quot;wildfly-app&quot; deleted
build.build.openshift.io &quot;wildfly-app-1&quot; deleted
imagestream.image.openshift.io &quot;wildfly-app&quot; deleted
route.route.openshift.io &quot;wildfly-app&quot; deleted&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;configuring-additional-aspects-of-the-datasource-subsystem&quot;&gt;Configuring additional aspects of the datasource subsystem&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you need to configure more than one data source or you need to configure some attributes that are not available by the &lt;a href=&quot;https://github.com/wildfly-extras/wildfly-datasources-galleon-pack&quot;&gt;WildFly Datasources Galleon Pack&lt;/a&gt;, there is a generic datasources subsystem configuration by using environment variables. You can check the &lt;a href=&quot;https://github.com/wildfly/wildfly-s2i/blob/master/doc/datasources.md&quot;&gt;Datasources configuration&lt;/a&gt; where these variables are explained. In the next example, we make use of some environments to configure two different datasources specifying different max/min pool sizes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One detail we need to take into account is we no longer need the PostgreSQL datasource configuration added by the WildFly Datasources Galleon Pack, since we are going to configure the data source using a different set of variables. But we still need the PostgreSQL driver added by the Galleon Pack. The solution is easy, just instead of specifying the &lt;code&gt;postgresql-datasource&lt;/code&gt; layer, we will specify this  the &lt;code&gt;postgresql-driver&lt;/code&gt; layer which is the layer that brings in only the driver.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Again, using &lt;code&gt;new-app&lt;/code&gt;, we configure the two data sources s specifying the different max/min pool sizes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ oc new-app --name wildfly-app \
           https://github.com/yersan/jaxrs-postgresql-demo.git \
           --image-stream= wildfly \
           --env DB_SERVICE_PREFIX_MAPPING=&quot;dbone-postgresql=DSONE,dbtwo-postgresql=DSTWO&quot; \
           --env DSONE_JNDI=&quot;java:/jboss/datasources/PostgreSQLDS&quot; \
           --env DSONE_USERNAME=&quot;postgre&quot; \
           --env DSONE_PASSWORD=&quot;admin&quot; \
           --env DSONE_DATABASE=&quot;demodb&quot; \
           --env DSONE_DRIVER=&quot;postgresql&quot; \
           --env DBONE_POSTGRESQL_SERVICE_HOST=&quot;database-server&quot; \
           --env DBONE_POSTGRESQL_SERVICE_PORT=5432 \
           --env DSONE_MAX_POOL_SIZE=10 \
           --env DSONE_MIN_POOL_SIZE=5 \
           --env DSONE_NONXA=true \
           --env DSTWO_JNDI=&quot;java:/jboss/datasources/UnusedDS&quot; \
           --env DSTWO_USERNAME=&quot;postgre&quot; \
           --env DSTWO_PASSWORD=&quot;admin&quot; \
           --env DSTWO_DATABASE=&quot;demodb&quot; \
           --env DSTWO_DRIVER=&quot;postgresql&quot; \
           --env DBTWO_POSTGRESQL_SERVICE_HOST=&quot;database-server&quot; \
           --env DBTWO_POSTGRESQL_SERVICE_PORT=5432 \
           --env DSTWO_MAX_POOL_SIZE=5 \
           --env DSTWO_MIN_POOL_SIZE=2 \
           --build-env GALLEON_PROVISION_LAYERS=jaxrs-server,postgresql-driver
warning: --env no longer accepts comma-separated lists of values. &quot;DB_SERVICE_PREFIX_MAPPING=dbone-postgresql=DSONE,dbtwo-postgresql=DSTWO&quot; will be treated as a single key-value pair.
--&amp;gt; Found image 38b29f9 (3 weeks old) in image stream &quot;openshift/wildfly&quot; under tag &quot;latest&quot; for &quot;wildfly&quot;

    WildFly 18.0.0.Final
    --------------------
    Platform for building and running JEE applications on WildFly 18.0.0.Final

    Tags: builder, wildfly, wildfly18

    * The source repository appears to match: jee
    * A source build using source code from https://github.com/yersan/jaxrs-postgresql-demo.git will be created
      * The resulting image will be pushed to image stream tag &quot;wildfly-app:latest&quot;
      * Use 'oc start-build' to trigger a new build
    * This image will be deployed in deployment config &quot;wildfly-app&quot;
    * Ports 8080/tcp, 8778/tcp will be load balanced by service &quot;wildfly-app&quot;
      * Other containers can access this service through the hostname &quot;wildfly-app&quot;

--&amp;gt; Creating resources ...
    imagestream.image.openshift.io &quot;wildfly-app&quot; created
    buildconfig.build.openshift.io &quot;wildfly-app&quot; created
    deploymentconfig.apps.openshift.io &quot;wildfly-app&quot; created
    service &quot;wildfly-app&quot; created
--&amp;gt; Success
    Build scheduled, use 'oc logs -f bc/wildfly-app' to track its progress.
    Application is not exposed. You can expose services to the outside world by executing one or more of the commands below:
     'oc expose svc/wildfly-app'
    Run 'oc status' to view your app.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;DB_SERVICE_PREFIX_MAPPING&lt;/code&gt; specifies the list of data sources we are going to configure (dbone-postgresql and dbtwo-postgresql) and links them with a variable prefix (DSONE and DSTWO). This mechanism allows us to create multiple datasources by using a variable prefix name identifying the variables that configure each data source. Explore the &lt;a href=&quot;https://github.com/wildfly/wildfly-s2i/blob/master/doc/datasources.md&quot;&gt;Datasource configuration documentation&lt;/a&gt; to learn more on this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once our application pod is created, if we inspect the final server configuration file, we will see that we have added two different data sources, one xa-datasource and one non-xa-datasource, each of them with a specific max/min pool sizes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ oc get pods
NAME                       READY   STATUS      RESTARTS   AGE
database-server-1-5l6fd    1/1     Running     0          19m
database-server-1-deploy   0/1     Completed   0          19m
wildfly-app-1-build        0/1     Completed   0          3m18s
wildfly-app-1-deploy       0/1     Completed   0          33s
wildfly-app-1-lwnf8        1/1     Running     0          25s

$ oc rsh wildfly-app-1-lwnf8
sh-4.2$ cat /opt/wildfly/standalone/configuration/standalone.xml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&amp;lt;subsystem xmlns=&quot;urn:jboss:domain:datasources:5.0&quot;&amp;gt;
    &amp;lt;datasources&amp;gt;
        &amp;lt;datasource jta=&quot;true&quot; jndi-name=&quot;java:/jboss/datasources/PostgreSQLDS&quot; pool-name=&quot;dbone_postgresql-DSONE&quot; enabled=&quot;true&quot; use-java-context=&quot;true&quot; statistics-enabled=&quot;${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}}&quot;&amp;gt;
            &amp;lt;connection-url&amp;gt;jdbc:postgresql://database-server:5432/demodb&amp;lt;/connection-url&amp;gt;
            &amp;lt;driver&amp;gt;postgresql&amp;lt;/driver&amp;gt;
            &amp;lt;pool&amp;gt;
                &amp;lt;min-pool-size&amp;gt;5&amp;lt;/min-pool-size&amp;gt;
                &amp;lt;max-pool-size&amp;gt;10&amp;lt;/max-pool-size&amp;gt;
            &amp;lt;/pool&amp;gt;
            &amp;lt;security&amp;gt;
                &amp;lt;user-name&amp;gt;postgre&amp;lt;/user-name&amp;gt;
                &amp;lt;password&amp;gt;admin&amp;lt;/password&amp;gt;
            &amp;lt;/security&amp;gt;
            &amp;lt;validation&amp;gt;
                &amp;lt;valid-connection-checker class-name=&quot;org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker&quot;/&amp;gt;
                &amp;lt;validate-on-match&amp;gt;true&amp;lt;/validate-on-match&amp;gt;
                &amp;lt;background-validation&amp;gt;false&amp;lt;/background-validation&amp;gt;
                &amp;lt;exception-sorter class-name=&quot;org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter&quot;/&amp;gt;
            &amp;lt;/validation&amp;gt;
        &amp;lt;/datasource&amp;gt;
        &amp;lt;xa-datasource jndi-name=&quot;java:/jboss/datasources/UnusedDS&quot; pool-name=&quot;dbtwo_postgresql-DSTWO&quot; enabled=&quot;true&quot; use-java-context=&quot;true&quot; statistics-enabled=&quot;${wildfly.datasources.statistics-enabled:${wildfly.statistics-enabled:false}}&quot;&amp;gt;
            &amp;lt;xa-datasource-property name=&quot;ServerName&quot;&amp;gt;
                database-server
            &amp;lt;/xa-datasource-property&amp;gt;
            &amp;lt;xa-datasource-property name=&quot;DatabaseName&quot;&amp;gt;
                demodb
            &amp;lt;/xa-datasource-property&amp;gt;
            &amp;lt;xa-datasource-property name=&quot;PortNumber&quot;&amp;gt;
                5432
            &amp;lt;/xa-datasource-property&amp;gt;
            &amp;lt;driver&amp;gt;postgresql&amp;lt;/driver&amp;gt;
            &amp;lt;xa-pool&amp;gt;
                &amp;lt;min-pool-size&amp;gt;2&amp;lt;/min-pool-size&amp;gt;
                &amp;lt;max-pool-size&amp;gt;5&amp;lt;/max-pool-size&amp;gt;
            &amp;lt;/xa-pool&amp;gt;
            &amp;lt;security&amp;gt;
                &amp;lt;user-name&amp;gt;postgre&amp;lt;/user-name&amp;gt;
                &amp;lt;password&amp;gt;admin&amp;lt;/password&amp;gt;
            &amp;lt;/security&amp;gt;
            &amp;lt;validation&amp;gt;
                &amp;lt;valid-connection-checker class-name=&quot;org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker&quot;/&amp;gt;
                &amp;lt;validate-on-match&amp;gt;true&amp;lt;/validate-on-match&amp;gt;
                &amp;lt;background-validation&amp;gt;false&amp;lt;/background-validation&amp;gt;
                &amp;lt;exception-sorter class-name=&quot;org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter&quot;/&amp;gt;
            &amp;lt;/validation&amp;gt;
        &amp;lt;/xa-datasource&amp;gt;
        &amp;lt;drivers&amp;gt;
            &amp;lt;driver name=&quot;postgresql&quot; module=&quot;org.postgresql.jdbc&quot;&amp;gt;
                &amp;lt;xa-datasource-class&amp;gt;org.postgresql.xa.PGXADataSource&amp;lt;/xa-datasource-class&amp;gt;
            &amp;lt;/driver&amp;gt;
        &amp;lt;/drivers&amp;gt;
    &amp;lt;/datasources&amp;gt;
&amp;lt;/subsystem&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice this time the datasources subsystem configuration is done when the server is launched by the deployment config resource. Behind the scenes the WildFly embedded server is launched and the server is configured from the values found in the environment variables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Since we have used the &lt;code&gt;postgresql-driver&lt;/code&gt; layer, we still have the PostgreSQL driver installed in our server, we can see it under the modules folder:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sh-4.2$ ls /opt/wildfly/modules/org/postgresql/jdbc/main/
module.xml  postgresql-9.4.1211.jar&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now you can delete the project to remove all the resources created in this demo:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;$ oc delete project wildfly-demo
project.project.openshift.io &quot;wildfly-demo&quot; deleted&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the next post, we will show you how you can configure the server using pure CLI &lt;a href=&quot;https://docs.wildfly.org/18/Admin_Guide.html#operations&quot;&gt;management operations &lt;/a&gt;instead of using environment variables. That will give you all the flexibility you could need to configure any aspect of the WildFly S2I cloud image.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Yeray Borges</name></author><category term="wildfly," /><category term="galleon" /></entry><entry><title type="html">WildFly 18 S2I image has been released on quay.io</title><link href="https://jbossorg.github.io/wildflysite/news/2019/10/07/WildFly-s2i-18-released/" rel="alternate" type="text/html" title="WildFly 18 S2I image has been released on quay.io" /><published>2019-10-07T00:00:00+00:00</published><updated>2019-10-07T00:00:00+00:00</updated><id>https://jbossorg.github.io/wildflysite/news/2019/10/07/WildFly-s2i-18-released</id><content type="html" xml:base="https://jbossorg.github.io/wildflysite/news/2019/10/07/WildFly-s2i-18-released/">&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;wildfly-18-s2i-docker-images&quot;&gt;WildFly 18 S2I docker images&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;WildFly s2i builder and runtime Docker images for WildFly 18 have been released on &lt;a href=&quot;https://quay.io/organization/wildfly&quot;&gt;quay.io/wildfly&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Changes since &lt;a href=&quot;https://wildfly.org/news/2019/06/20/WildFly-s2i-17-released/&quot;&gt;last release&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;New env variable &lt;em&gt;GALLEON_PROVISION_LAYERS=&amp;lt;layers list&amp;gt;&lt;/em&gt; that you can use during s2i to provision a custom WildFly server. It does replace the &lt;em&gt;GALLEON_PROVISION_SERVER&lt;/em&gt; that was only offering a subset of Galleon layers.
You can now provision WildFly server by directly providing Galleon layers. This offers a lot of flexibility when composing a server.
The list of Galleon layers can be found in the image repository &lt;a href=&quot;https://github.com/wildfly/wildfly-s2i/blob/wf-18.0/README.md&quot;&gt;README&lt;/a&gt; file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;S2I chained build template updated with Galleon layers argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New &lt;em&gt;cloud-server&lt;/em&gt;, &lt;em&gt;jaxrs-server&lt;/em&gt;, &lt;em&gt;datasources-web-server&lt;/em&gt; base Galleon layers to help you provision &lt;em&gt;use-case adjusted&lt;/em&gt; servers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Out of the box Keycloak support. This blog post highlight usage of this new feature.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;keycloak&lt;/em&gt; Galleon layer that you can combine with base Galleon layers to enable secure deployments for custom provisioned server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Smaller s2i builder image size. The default server is a &quot;slim&quot; server with JBoss modules artifacts resolved from maven local cache.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New environment variables to fine tune the server at execution time, more information in &lt;a href=&quot;https://github.com/wildfly/wildfly-s2i/blob/wf-18.0/README.md&quot;&gt;README&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For a complete documentation on how to use these images using s2i, OpenShift and Docker,
refer to &lt;a href=&quot;https://github.com/wildfly/wildfly-s2i/blob/wf-18.0/README.md&quot;&gt;README&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;adding-imagestreams-and-template-to-openshift&quot;&gt;Adding imagestreams and template to OpenShift&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At some point the new images will be made available from OpenShift catalog and image repository. You can already use these images by adding them yourselves to your OpenShift cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;WildFly S2I builder image stream: &lt;em&gt;oc create -f &lt;a href=&quot;https://raw.githubusercontent.com/wildfly/wildfly-s2i/wf-18.0/imagestreams/wildfly-centos7.json&quot; class=&quot;bare&quot;&gt;https://raw.githubusercontent.com/wildfly/wildfly-s2i/wf-18.0/imagestreams/wildfly-centos7.json&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;WildFly runtime image stream: &lt;em&gt;oc create -f &lt;a href=&quot;https://raw.githubusercontent.com/wildfly/wildfly-s2i/wf-18.0/imagestreams/wildfly-runtime-centos7.json&quot; class=&quot;bare&quot;&gt;https://raw.githubusercontent.com/wildfly/wildfly-s2i/wf-18.0/imagestreams/wildfly-runtime-centos7.json&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Chained build template: &lt;em&gt;oc create -f &lt;a href=&quot;https://raw.githubusercontent.com/wildfly/wildfly-s2i/wf-18.0/templates/wildfly-s2i-chained-build-template.yml&quot; class=&quot;bare&quot;&gt;https://raw.githubusercontent.com/wildfly/wildfly-s2i/wf-18.0/templates/wildfly-s2i-chained-build-template.yml&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;NB: If you import the image streams in your project, be sure to set &lt;em&gt;ImageStreams Namespace&lt;/em&gt; to your project namespace in the template. &lt;em&gt;openshift&lt;/em&gt; being the default namespace.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;configuring-wildfly-server-to-secure-deployments-with-keycloak&quot;&gt;Configuring WildFly server to secure deployments with Keycloak&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have added support to automatically configure the WildFly server to secure your deployments using Keycloak.
The Keycloak configuration aspects are handled by the WildFly server at startup. The following example illustrate the steps required to secure your deployments using Keycloak.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;deploy-keycloak-server-image&quot;&gt;Deploy Keycloak server image&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In Openshift, deploy the &lt;em&gt;jboss/keycloak&lt;/em&gt; image. You must set the following env variables to create an initial user &lt;em&gt;KEYCLOAK_USER=admin&lt;/em&gt;, &lt;em&gt;KEYCLOAK_PASSWORD=admin&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Access to the Keycloak admin console, add &lt;em&gt;user&lt;/em&gt; role and add &lt;em&gt;user&lt;/em&gt; role to the &lt;em&gt;admin&lt;/em&gt; user roles mapping.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Access to the &lt;em&gt;Realm Settings Keys&lt;/em&gt; and copy the public key (you will need it to configure the WildFly server).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;build-the-application&quot;&gt;Build the application&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once you have imported the WildFly image streams, use the WildFly s2i builder template. Select image version 18.0 and switch to 'Advanced options'.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use the git URL: &lt;em&gt;&lt;a href=&quot;https://github.com/redhat-developer/redhat-sso-quickstarts&quot; class=&quot;bare&quot;&gt;https://github.com/redhat-developer/redhat-sso-quickstarts&lt;/a&gt;&lt;/em&gt;, context directory: &lt;em&gt;app-profile-jee-jsp&lt;/em&gt;, branch: &lt;em&gt;7.0.x-ose&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Build env variables:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;MAVEN_ARGS_APPEND=-Dmaven.compiler.source=1.6 -Dmaven.compiler.target=1.6&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;GALLEON_PROVISION_LAYERS=cloud-server,keycloak&lt;/em&gt; (Optional, default server supports Keycloak, only use Galleon to create trimmed down server). NB: If using galleon layers, be sure
to update the quickstart to use the &lt;em&gt;keycloak&lt;/em&gt; security domain (for example &lt;a href=&quot;https://github.com/jfdenise/redhat-sso-quickstarts/blob/7.0.x-ose/app-profile-jee-jsp/src/main/webapp/WEB-INF/jboss-web.xml&quot;&gt;jboss-web.xml&lt;/a&gt;). &lt;em&gt;other&lt;/em&gt; security domain is pre-configured by the &lt;em&gt;cloud-profile&lt;/em&gt; layer and can&amp;#8217;t be used for Keycloak.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Deployment env variables:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;SSO_PUBLIC_KEY=&amp;lt;Keycloak server public key&amp;gt;&lt;/em&gt; (copied from Keycloak admin console)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;SSO_USERNAME=admin&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;SSO_PASSWORD=admin&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;SSO_URL=&amp;lt;Keycloak server route URL&amp;gt;&lt;/em&gt; (for example: &lt;a href=&quot;http://keycloak-myproject.192.168.42.233.nip.io/auth&quot; class=&quot;bare&quot;&gt;http://keycloak-myproject.192.168.42.233.nip.io/auth&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;SSO_SECRET=my-secret&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;HOSTNAME_HTTP=&amp;lt;application hostname&amp;gt;&lt;/em&gt; (for example: my-app-myproject.192.168.42.233.nip.io)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;SSO_SECURITY_DOMAIN=other&lt;/em&gt; (by default security domain is named &lt;em&gt;keycloak&lt;/em&gt;, the quickstart relies on the &lt;em&gt;other&lt;/em&gt; default security domain.
NB: If using Galleon with an updated quickstart, do not set this env variable).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Build your application. Once deployed you can access to &lt;em&gt;&amp;lt;your external route&amp;gt;/app-profile-jsp&lt;/em&gt;, click on &lt;em&gt;Login&lt;/em&gt; and use &lt;em&gt;admin&lt;/em&gt; user credentials.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Jean-François Denise</name></author><category term="wildfly," /><category term="galleon" /></entry><entry><title type="html">WildFly 18 is released!</title><link href="https://jbossorg.github.io/wildflysite/news/2019/10/03/WildFly18-Final-Released/" rel="alternate" type="text/html" title="WildFly 18 is released!" /><published>2019-10-03T14:00:00+00:00</published><updated>2019-10-03T14:00:00+00:00</updated><id>https://jbossorg.github.io/wildflysite/news/2019/10/03/WildFly18-Final-Released</id><content type="html" xml:base="https://jbossorg.github.io/wildflysite/news/2019/10/03/WildFly18-Final-Released/">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m pleased to announce that the WildFly 18 Final zip is now available &lt;a href=&quot;{base_url}/downloads&quot;&gt;for download&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This has been a very busy summer for the many folks who contribute to WildFly; a lot of long hours and a lot of progress. I&amp;#8217;m forever grateful for the chance to work on a project with such a great group of people.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, what have we been up to?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jakarta-ee-and-java-ee&quot;&gt;Jakarta EE and Java EE&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As I announced last month, WildFly 17.0.1 was certified as a Jakarta EE 8 compatible implementation. As you would expect, WildFly 18 is compatible as well, with both the Full Platform and the Web Profile. Evidence supporting our certification is available &lt;a href=&quot;https://github.com/wildfly/certifications/blob/EE8/WildFly_18.0.0.Final/jakarta-full-platform.adoc&quot;&gt;here&lt;/a&gt; for Full Platform and &lt;a href=&quot;https://github.com/wildfly/certifications/blob/EE8/WildFly_18.0.0.Final/jakarta-web-profile.adoc&quot;&gt;here&lt;/a&gt; for the Web Profile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;WildFly 18 is also a certified compatible implementation of Java EE 8.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Besides ensuring WildFly is a compatible Jakarta EE 8 implementation, we put a lot of effort into better alignment with the Jakarta EE API projects, which I explain further &lt;a href=&quot;#alignment&quot;&gt;below&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;microprofile-3&quot;&gt;MicroProfile 3&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition to the parts of MicroProfile that are also in EE 8, WildFly provides support for five other MicroProfile standards. For WildFly 18 we have upgraded those to the spec versions included in the MicroProfile 3.0 release:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Specification&lt;/th&gt;
&lt;th class=&quot;tableblock halign-center valign-top&quot;&gt;Version in WildFly 18&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MP Config&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.3&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MP Health Check&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.0&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MP Metrics&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;2.0&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MP OpenTracing&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.3&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MP Rest Client&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-center valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.3&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MicroProfile will be a significant focus for the next couple of WildFly releases. For WildFly 19 we are aiming to introduce support for the three remaining required MP 3 specs that we don&amp;#8217;t currently support: MP JWT Authentication, MP Fault Tolerance and MP Open API.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;security-enhancements&quot;&gt;Security Enhancements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;WildFly 18 brings a number of enhancements in the security area:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wildfly/wildfly-proposals/blob/master/elytron/WFCORE-3947-ocsp-ssl-revocation.adoc&quot;&gt;SSL certificate revocation using OCSP&lt;/a&gt; is now supported.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Elytron audit logging now &lt;a href=&quot;https://github.com/wildfly/wildfly-proposals/blob/master/elytron/ELY-1712-enhanced-audit-logging.adoc&quot;&gt;supports RFC5424/RFC3164 and also allows the administrator to configure the number of reconnect attempts.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wildfly/wildfly-proposals/blob/master/elytron/WFCORE-4361-evidence-decoder.adoc&quot;&gt;Mapping of an X509 Certificate to the underlying identity&lt;/a&gt; has been enhanced.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Elytron subsystem now &lt;a href=&quot;https://github.com/wildfly/wildfly-proposals/blob/master/elytron/WFCORE-4447-realm-aggregation-for-attributes.adoc&quot;&gt;supports loading the attributes of an identity using multiple security realms and aggregating the results together into a single identity&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The high level CLI security commands (&lt;code&gt;ssl enable-ssl-management&lt;/code&gt; and &lt;code&gt;ssl enable-ssl-http-server&lt;/code&gt;) have been enhanced to support &lt;a href=&quot;https://github.com/wildfly/wildfly-proposals/blob/master/cli/WFCORE-4227-Add_the_ability_for_the_CLI_SSL_security_commands_to_be_able_to_obtain_a_server_certificate_from_Lets_Encrypt.adoc&quot;&gt;obtaining certificates from the Let&amp;#8217;s Encrypt certificate authority&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Elytron subsystem&amp;#8217;s aggregrate security realms now support &lt;a href=&quot;https://github.com/wildfly/wildfly-proposals/blob/master/elytron/WFCORE-4496-principal-transformer-in-aggregate-realm.adoc&quot;&gt;transforming the principal in between loading the authentication identity and loading the authorization identity.&lt;/a&gt; This would be needed in the case where the principal stored in the authentication realm is different from the principal stored in the authorization realm(s).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wildfly/wildfly-proposals/blob/master/elytron/ELY-816-masked-password.adoc&quot;&gt;Support for masking passwords in an Elytron client&amp;#8217;s XML configuration&lt;/a&gt; was added.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The certificate authority used by a &lt;code&gt;certificate-authority-account&lt;/code&gt; resource is now &lt;a href=&quot;https://github.com/wildfly/wildfly-proposals/blob/master/elytron/WFCORE-4362-configurable-certificate-authority-in-certificate-authority-account.adoc&quot;&gt;configurable&lt;/a&gt;. This may help in some testing scenarios, or in the future if other authorities besides Let&amp;#8217;s Encrypt support the ACME protocol.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;enhancements-to-the-ee-subsystems&quot;&gt;Enhancements to the EE Subsystems&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are a number of new features provided by various WildFly subsystems that I&amp;#8217;ll lump into the 'EE' category:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In the EJB3 subsystem support has been added for configuring system-wide (i.e. applicable to all EJB deployments) &lt;a href=&quot;https://github.com/wildfly/wildfly-proposals/blob/master/ejb/WFLY-6144-Global_EJB_client_side_interceptor_configuration.adoc&quot;&gt;client-side interceptors&lt;/a&gt; and &lt;a href=&quot;https://github.com/wildfly/wildfly-proposals/blob/master/ejb/WFLY-6143-Ability-to-add-a-server-side-configured-Interceptor-for-the-applications-without-changing-the-deployments.adoc&quot;&gt;server-side interceptors&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/wildfly/wildfly-proposals/blob/master/ejb/WFLY-10057-thread-pool.adoc&quot;&gt;behavior and configurability of thread pools used in the EJB3 subsystem&lt;/a&gt; has been improved.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RESTEasy now &lt;a href=&quot;https://github.com/wildfly/wildfly-proposals/blob/master/jaxrs/WFLY-11737_http_proxy.adoc&quot;&gt;supports enabling an HTTP proxy on the client builder using the JAX-RS API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RESTEasy now &lt;a href=&quot;https://github.com/wildfly/wildfly-proposals/blob/master/jaxrs/WFLY-12192_optional_param.adoc&quot;&gt;supports injecting &lt;code&gt;Optional&amp;lt;T&amp;gt;&lt;/code&gt; parameter types&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The messaging subsystem now:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wildfly/wildfly-proposals/blob/master/messaging/WFLY-11293_add_attribute_to_indicate_backup_is_synchronized.adoc&quot;&gt;Exposes an attribute which indicates whether any backup server is synchronized with the live server&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wildfly/wildfly-proposals/blob/master/messaging/WFLY-5286_add_runtime_journal_type_attribute.adoc&quot;&gt;Exposes an attribute that indicates the Artemis journal type that&amp;#8217;s in use&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wildfly/wildfly-proposals/blob/master/messaging/WFLY-6684_jms_bridge_statistics.adoc&quot;&gt;Displays statistics about messages that have been processed by any JMS bridge&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wildfly/wildfly-proposals/blob/master/messaging/WFLY-12243_monitor_artemis_resource_adapter_thread_pools.adoc&quot;&gt;Exposes metrics from Artemis resource adapter thread pools&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/wildfly/wildfly-proposals/blob/master/undertow/WFLY-11764_Preserve_Path_on_Forward.adoc&quot;&gt;return value of &lt;code&gt;HttpServletRequest.getServletPath/getRequestURI/getRequestURL&lt;/code&gt; is now configurable&lt;/a&gt;. This feature is to support a backwards compatible behavior of &lt;code&gt;HttpServletRequest.getServletPath&lt;/code&gt;. For example, in a Struts2 application deployed to JBoss AS 7, this method returns the action name, but in WildFly it returns the forwarded jsp name. If the JBoss AS 7 behavior is preferred this can now be configured.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;clustering-enhancements&quot;&gt;Clustering Enhancements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As always, the folks working on clustering have been busy as well:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For a clustered web app the &lt;code&gt;JSESSIONID&lt;/code&gt; can now be &lt;a href=&quot;https://github.com/wildfly/wildfly-proposals/blob/master/clustering/web/WFLY-6944_Ranked_routing.adoc&quot;&gt;encoded with multiple routes, ranked in order of preference&lt;/a&gt;. Thus, if the primary owner of a given session is inactive (from the load balancer&amp;#8217;s perspective), the load balancer can attempt to route the request to the next route in the list.  This ensures that requests will be directed to the next best worker in the event that the primary owner is inactive, and prevents requests from &quot;spraying&quot; across the cluster.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Infinispan subsystem now &lt;a href=&quot;https://github.com/wildfly/wildfly-proposals/blob/master/clustering/infinispan/WFLY-12165_Remote_Cache_Metrics.adoc&quot;&gt;exposes management metrics for remote HotRod caches&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;management&quot;&gt;Management&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The logging subsystem now supports &lt;a href=&quot;https://github.com/wildfly/wildfly-proposals/blob/master/logging/WFCORE-4336-custom-filters.adoc&quot;&gt;configuration of custom logging filters&lt;/a&gt;, allowing for a higher degree of control over logging. As an example a filter could be created to filter messages based on the cause of the log message.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The HAL web console includes &lt;a href=&quot;https://issues.redhat.com/issues/?filter=12341194&quot;&gt;numerous new features and enhancements&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;wildfly-in-the-cloud&quot;&gt;WildFly in the Cloud&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve continued to make a lot of progress on the &lt;a href=&quot;https://github.com/wildfly/wildfly-s2i&quot;&gt;source-to-image (s2i) image for WildFly&lt;/a&gt; and on the &lt;a href=&quot;https://operatorhub.io/operator/wildfly&quot;&gt;WildFly Operator for Kubernetes/OpenShift&lt;/a&gt;. We&amp;#8217;ll provide further details on what&amp;#8217;s new there in the next couple of weeks when we announce new versions of those images based on the WildFly 18 server release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;alignment-with-jakarta-ee-api-projects&quot;&gt;&lt;a id=&quot;alignment&quot;&gt;&lt;/a&gt;Alignment with Jakarta EE API Projects&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Besides ensuring we could certify as Jakarta EE 8 compatible, a lot of effort this summer went into further aligning with the Jakarta community. Specifically, WildFly incorporates a large number of component jars that provide the various EE APIs. For some EE specs WildFly directly provided jars produced by the various Java EE spec projects; for others the JBoss.org community has provided its own jars, derived from source from the Java EE spec projects. For both cases, for WildFly 18 we moved to align the source for our API jars with the source coming from the active Jakarta community.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For projects where we were directly shipping a jar from a Java EE 8 project, we switched to a jar from the equivalent Jakarta project. As a result the Maven &lt;code&gt;groupId&lt;/code&gt; and &lt;code&gt;artifactId&lt;/code&gt; of these artifacts has changed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For projects where we were consuming an API jar produced by a JBoss.org community project, for all of those projects a new github repo was created, with the initial code derived from the Jakarta projects, and new releases were produced. For these APIs the Maven &lt;code&gt;groupId&lt;/code&gt; and &lt;code&gt;artifactId&lt;/code&gt; did not change (except for JTA, where we moved from the 1.2 version of the spec to 1.3, which affected the &lt;code&gt;artifactId&lt;/code&gt;). The new releases have a maven version number one higher than the previous release, but this version bump solely reflects the new &lt;em&gt;origin&lt;/em&gt; of the source code. It does not indicate major changes in the source itself.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s important to emphasize that the Jakarta EE 8 APIs are API identical to the Java EE 8 APIs and generally the method implementations are identical as well. So this change of the source from which we get the API jars is not expected to introduce any runtime incompatibility. This change is all about aligning the code we provide with projects that are actively maintained.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you were compiling a deployment project against the Java EE 8 API artifacts we shipped in WildFly 17, that deployment should run fine on WildFly 18.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;WildFly provides a number of maven boms for each release. These boms have been updated to use the Jakarta-based dependencies. In addition, the previous boms with maven ids &lt;code&gt;org.wildfly.bom:wildfly-javaee8&lt;/code&gt; and &lt;code&gt;org.wildfly.bom:wildfly-javaee8-with-tools&lt;/code&gt; have been discontinued and new boms &lt;code&gt;org.wildfly.bom:wildfly-jakartaee8&lt;/code&gt; and &lt;code&gt;org.wildfly.bom:wildfly-jakartaee8-with-tools&lt;/code&gt; have been introduced. Note that this name change does not indicate the WildFly 18 is not a Java EE 8 compatible server. We&amp;#8217;re just aligning our names with Jakarta EE.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Within the WildFly runtime, deployments don&amp;#8217;t concern themselves with the Maven GAV of the API jars we provide. To the extent a deployment is concerned at all about the details of how EE API classes are made visible (which would not be common), it would be interested in the names of the JBoss Modules modules that provide the spec classes. All of the existing EE API modules from WildFly 17 still exist in 18&amp;#8201;&amp;#8212;&amp;#8201;with the same names&amp;#8201;&amp;#8212;&amp;#8201;and provide the equivalent APIs so there is no need for deployment authors to make any changes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jdk-13&quot;&gt;JDK 13&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our goal with WildFly is to have our releases run well for most use cases on the most recent GA JDK version available on the WildFly final release date. I&amp;#8217;m pleased to report that this is the case with WildFly 18 and JDK 13. By run well, I mean the &lt;a href=&quot;https://ci.wildfly.org/viewType.html?buildTypeId=WF_MasterLinuxJdk13&quot;&gt;main WildFly testsuite&lt;/a&gt; runs with no more than a few failures in areas not expected to be commonly used. We want developers who are trying to evaluate what the latest JVM means for their applications to be able to look to WildFly as a useful development platform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While we do want to run well on the most recent JDK, our recommendation is that you run WildFly on the most recent long-term support release, i.e. on JDK 11 for WildFly 18.  We do considerably more testing of WildFly itself on the LTS JDKs, and we make no attempt to ensure the projects producing the various libraries we integrate are testing their libraries on anything other than JDK 8 or 11.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;WildFly 18 also is heavily tested and runs well on Java 8. We plan to continue to support Java 8 at least through WildFly 21, and probably beyond.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please note that WildFly runs on Java 11 and later in classpath mode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point it is uncertain whether we&amp;#8217;ll be able to say that the release of WildFly that follows JDK 14 going GA will run well on 14. We&amp;#8217;ll have to see how well the work for that, both in WildFly itself and in the projects we integrate, aligns with our other goals for that release.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jira-release-notes&quot;&gt;Jira Release Notes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The full list of issues resolved is available &lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12313721&amp;amp;version=12342528&quot;&gt;here&lt;/a&gt;. Issues resolved in the WildFly Core 10 releases included with WildFly 18 are available &lt;a href=&quot;https://issues.redhat.com/secure/ReleaseNote.jspa?projectId=12315422&amp;amp;version=12342773&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enjoy, and as always, thank you so much for your support of WildFly!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Brian Stansberry</name></author><category term="announcement," /><category term="release" /></entry><entry><title type="html">WildFly is Jakarta EE 8 Certified!</title><link href="https://jbossorg.github.io/wildflysite/news/2019/09/12/WildFly_Jakarta_EE_8/" rel="alternate" type="text/html" title="WildFly is Jakarta EE 8 Certified!" /><published>2019-09-12T14:00:00+00:00</published><updated>2019-09-12T14:00:00+00:00</updated><id>https://jbossorg.github.io/wildflysite/news/2019/09/12/WildFly_Jakarta_EE_8</id><content type="html" xml:base="https://jbossorg.github.io/wildflysite/news/2019/09/12/WildFly_Jakarta_EE_8/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tuesday was a great day in the world of enterprise Java. It&amp;#8217;s been a long road since Jakarta EE was born following Oracle&amp;#8217;s announcement that stewardship of Java EE would be moving to the Eclipse Foundation. But after a lot of hard work by folks in the Jakarta community, Jakarta EE 8 has been released. Congratulations to everyone involved with the Jakarta EE Platform project and all the various spec projects. The ability to enhance enterprise Java standards under an open-source model should bring great benefits to our communities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m pleased to say that WildFly 17.0.1 has passed the Jakarta EE 8 TCK and our compatibility certification request has been approved by the Jakarta EE Spec Committee. So, WildFly is a Jakarta EE Full platform compatible implementation. We also remain a certified Java EE 8 compatible implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My thanks to the many people whose work on WildFly and Jakarta EE made this certification possible, particularly to Scott Stark and Scott Marlow, who put in a lot of long days and nights on this. TCKs are not simple things, something you can now find out for yourself, as the move to Jakarta means the TCKs are all open source!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;re interested in the details of our certification request, they can be found at &lt;a href=&quot;https://github.com/wildfly/certifications/blob/EE8/WildFly_17.0.1.Final/jakarta-full-profile.adoc&quot;&gt;our certification repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Onward to WildFly 18!&lt;/p&gt;
&lt;/div&gt;</content><author><name>Brian Stansberry</name></author><category term="announcement," /><category term="certification," /><category term="Jakarta" /></entry></feed>